warning: unused import: `std::pin::Pin`
  --> crates/common/src/lib.rs:24:5
   |
24 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::sync::Arc`
  --> crates/common/src/lib.rs:25:5
   |
25 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: `common` (lib) generated 2 warnings
warning: unused import: `cell::RefCell`
 --> crates/data_structure/unique_allocator/src/pool.rs:1:11
  |
1 | use std::{cell::RefCell, mem::MaybeUninit};
  |           ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `common::*`
 --> crates/data_structure/unique_allocator/src/pool.rs:3:5
  |
3 | use common::*;
  |     ^^^^^^^^^

warning: unused variable: `indent`
  --> crates/data_structure/fold/src/fold_iter.rs:31:45
   |
31 |     pub(crate) fn new(storage: &'a Storage, indent: Indent, next: Option<usize>) -> Self {
   |                                             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_indent`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused import: `borrow::Borrow`
 --> crates/data_structure/unique-vector/src/lib.rs:1:11
  |
1 | use std::{borrow::Borrow, iter::Iterator, ops::Deref};
  |           ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `common::should_eq`
 --> crates/data_structure/unique-vector/src/lib.rs:3:5
  |
3 | use common::should_eq;
  |     ^^^^^^^^^^^^^^^^^

warning: `unique-allocator` (lib) generated 2 warnings
warning: `fold` (lib) generated 1 warning
warning: `unique-vector` (lib) generated 2 warnings
warning: unused import: `Any`
 --> crates/husky-lang/vm/src/value/any.rs:2:11
  |
2 |     any::{Any, TypeId},
  |           ^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `vm` (lib) generated 1 warning
warning: unused import: `unique_allocator::UniqueAllocatorPtr`
 --> crates/husky-lang/file/src/query.rs:6:5
  |
6 | use unique_allocator::UniqueAllocatorPtr;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `file` (lib) generated 1 warning
warning: unused variable: `main`
  --> crates/husky-lang/syntax/scope/src/lib.rs:44:36
   |
44 |             ScopeRoute::Implicit { main, ident } => todo!(),
   |                                    ^^^^ help: try ignoring the field: `main: _`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ident`
  --> crates/husky-lang/syntax/scope/src/lib.rs:44:42
   |
44 |             ScopeRoute::Implicit { main, ident } => todo!(),
   |                                          ^^^^^ help: try ignoring the field: `ident: _`

warning: `scope` (lib) generated 2 warnings
warning: unused import: `vm::AnyValueDyn`
 --> crates/builtin/dataset/src/synthetic/iter.rs:6:5
  |
6 | use vm::AnyValueDyn;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ScopePtr`
  --> crates/builtin/dataset/src/synthetic/trivial/real1d.rs:36:31
   |
36 | use scope::{RawFuncSignature, ScopePtr};
   |                               ^^^^^^^^

warning: unused import: `word::BuiltinIdentifier`
  --> crates/builtin/dataset/src/synthetic/trivial/real1d.rs:38:5
   |
38 | use word::BuiltinIdentifier;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: field is never read: `dataset`
  --> crates/builtin/dataset/src/synthetic/iter.rs:13:5
   |
13 |     dataset: &'a D,
   |     ^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field is never read: `seed`
  --> crates/builtin/dataset/src/synthetic/iter.rs:14:5
   |
14 |     seed: u64,
   |     ^^^^^^^^^

warning: field is never read: `current`
  --> crates/builtin/dataset/src/synthetic/iter.rs:15:5
   |
15 |     current: MaybeUninit<BoxedValue<'static>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field is never read: `next_idx`
  --> crates/builtin/dataset/src/synthetic/iter.rs:16:5
   |
16 |     next_idx: usize,
   |     ^^^^^^^^^^^^^^^

warning: unused import: `PrimitiveValue`
  --> crates/husky-lang/syntax/types/src/lib.rs:10:25
   |
10 | use vm::{InputContract, PrimitiveValue};
   |                         ^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `scope`
  --> crates/husky-lang/syntax/types/src/env.rs:19:25
   |
19 |             Env::Module(scope) => "module",
   |                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_scope`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `dataset` (lib) generated 7 warnings
warning: `syntax-types` (lib) generated 2 warnings
warning: unused import: `crate::ScopeQueryGroup`
 --> crates/husky-lang/syntax/scope_query/src/subscope.rs:6:5
  |
6 | use crate::ScopeQueryGroup;
  |     ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `main`
   --> crates/husky-lang/syntax/scope_query/src/query.rs:127:32
    |
127 |         ScopeRoute::Implicit { main, ident } => todo!(),
    |                                ^^^^ help: try ignoring the field: `main: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ident`
   --> crates/husky-lang/syntax/scope_query/src/query.rs:127:38
    |
127 |         ScopeRoute::Implicit { main, ident } => todo!(),
    |                                      ^^^^^ help: try ignoring the field: `ident: _`

warning: `scope_query` (lib) generated 3 warnings
warning: unused import: `std::sync::Arc`
 --> crates/husky-lang/syntax/ast/src/atom/kind.rs:1:5
  |
1 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `WordPtr`
 --> crates/husky-lang/syntax/ast/src/atom/kind.rs:6:30
  |
6 | use word::{CustomIdentifier, WordPtr};
  |                              ^^^^^^^

warning: unused import: `scope::RangedScope`
 --> crates/husky-lang/syntax/ast/src/atom/parser/impl_scope.rs:1:5
  |
1 | use scope::RangedScope;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `RangedScope`
 --> crates/husky-lang/syntax/ast/src/atom/stack.rs:3:30
  |
3 | use scope::{GenericArgument, RangedScope, ScopeKind};
  |                              ^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> crates/husky-lang/syntax/ast/src/expr/kind.rs:1:5
  |
1 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `atom::AtomKind`
 --> crates/husky-lang/syntax/ast/src/expr/kind.rs:3:5
  |
3 | use atom::AtomKind;
  |     ^^^^^^^^^^^^^^

warning: unused import: `word::WordPtr`
 --> crates/husky-lang/syntax/ast/src/expr/kind.rs:6:5
  |
6 | use word::WordPtr;
  |     ^^^^^^^^^^^^^

warning: unused import: `LambdaHead`
 --> crates/husky-lang/syntax/ast/src/expr/stack.rs:1:21
  |
1 | use atom::{Bracket, LambdaHead, ListEndAttr, ListStartAttr, PrefixOpr, SuffixOpr};
  |                     ^^^^^^^^^^

warning: unused import: `AstQueryGroup`
  --> crates/husky-lang/syntax/ast/src/transform.rs:19:13
   |
19 |     query::{AstQueryGroup, AstSalsaQueryGroup, AstText},
   |             ^^^^^^^^^^^^^

warning: unused variable: `file`
  --> crates/husky-lang/syntax/ast/src/query.rs:17:19
   |
17 |     fn ast(&self, file: file::FilePtr, token_group_index: usize) -> ScopeResult<&AstResult<Ast>> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_file`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `token_group_index`
  --> crates/husky-lang/syntax/ast/src/query.rs:17:40
   |
17 |     fn ast(&self, file: file::FilePtr, token_group_index: usize) -> ScopeResult<&AstResult<Ast>> {
   |                                        ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_token_group_index`

warning: type alias is never used: `LambdaHead`
  --> crates/husky-lang/syntax/ast/src/atom/kind.rs:25:1
   |
25 | pub type LambdaHead = Vec<(Identifier, Option<RangedScope>)>;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: variant is never constructed: `Call`
   --> crates/husky-lang/syntax/ast/src/atom/kind.rs:111:5
    |
111 |     Call,        // $0($1,*)
    |     ^^^^

warning: variant is never constructed: `Index`
   --> crates/husky-lang/syntax/ast/src/atom/kind.rs:112:5
    |
112 |     Index,       // $0[$1,*]
    |     ^^^^^

warning: variant is never constructed: `Curl`
   --> crates/husky-lang/syntax/ast/src/atom/kind.rs:113:5
    |
113 |     Curl,        // $0{$1,*}
    |     ^^^^

warning: variant is never constructed: `ParIndex`
   --> crates/husky-lang/syntax/ast/src/atom/kind.rs:114:5
    |
114 |     ParIndex,    // $0[$1,*%]
    |     ^^^^^^^^

warning: variant is never constructed: `DoubleIndex`
   --> crates/husky-lang/syntax/ast/src/atom/kind.rs:115:5
    |
115 |     DoubleIndex, // $0[[$1,*]]
    |     ^^^^^^^^^^^

warning: associated function is never used: `resolve_subscope`
  --> crates/husky-lang/syntax/ast/src/atom/symbol_proxy.rs:79:8
   |
79 |     fn resolve_subscope(
   |        ^^^^^^^^^^^^^^^^

warning: `ast` (lib) generated 18 warnings
warning: unused variable: `enter_block`
  --> crates/husky-lang/fmt/src/formatter.rs:45:9
   |
45 |         enter_block: impl FnOnce(&mut Self),
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_enter_block`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ident`
   --> crates/husky-lang/fmt/src/formatter.rs:115:33
    |
115 |             ast::AstKind::Use { ident, scope } => todo!(),
    |                                 ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `scope`
   --> crates/husky-lang/fmt/src/formatter.rs:115:40
    |
115 |             ast::AstKind::Use { ident, scope } => todo!(),
    |                                        ^^^^^ help: try ignoring the field: `scope: _`

warning: unused variable: `ident`
   --> crates/husky-lang/fmt/src/formatter.rs:125:17
    |
125 |                 ident,
    |                 ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `opr`
   --> crates/husky-lang/fmt/src/formatter.rs:215:29
    |
215 |                 Opr::Prefix(opr) => todo!(),
    |                             ^^^ help: if this is intentional, prefix it with an underscore: `_opr`

warning: field is never read: `word_unique_allocator`
  --> crates/husky-lang/fmt/src/formatter.rs:12:5
   |
12 |     word_unique_allocator: &'a WordInterner,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `husky-fmt` (lib) generated 6 warnings
warning: unused import: `EntityVersionControl`
 --> crates/husky-lang/feature/src/block.rs:4:57
  |
4 | use semantics::{DeclBranchKind, DeclStmt, DeclStmtKind, EntityVersionControl, SemanticQueryGroup};
  |                                                         ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `bitvec::prelude::BitVec`
 --> crates/husky-lang/feature/src/branch.rs:1:5
  |
1 | use bitvec::prelude::BitVec;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DeclBranchKind`
 --> crates/husky-lang/feature/src/stmt.rs:2:17
  |
2 | use semantics::{DeclBranchKind, DeclBranchesKind};
  |                 ^^^^^^^^^^^^^^

warning: unused variable: `pattern`
  --> crates/husky-lang/feature/src/block.rs:94:64
   |
94 | ...                   DeclBranchKind::Case { ref pattern } => todo!(),
   |                                              ^^^^^^^^^^^ help: try ignoring the field: `pattern: _`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `compiled`
  --> crates/husky-lang/feature/src/eval.rs:71:21
   |
71 |         if let Some(compiled) = maybe_compiled {
   |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compiled`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `scope`
  --> crates/husky-lang/feature/src/expr.rs:74:31
   |
74 |             ExprKind::Scope { scope, compiled } => todo!(),
   |                               ^^^^^ help: try ignoring the field: `scope: _`

warning: unused variable: `compiled`
  --> crates/husky-lang/feature/src/expr.rs:74:38
   |
74 |             ExprKind::Scope { scope, compiled } => todo!(),
   |                                      ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `compiled`
  --> crates/husky-lang/feature/src/expr.rs:85:17
   |
85 |                 compiled,
   |                 ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `kind`
  --> crates/husky-lang/feature/src/expr.rs:88:42
   |
88 |                 Opn::Binary { opr, this, kind } => match this {
   |                                          ^^^^ help: try ignoring the field: `kind: _`

warning: field is never read: `input`
  --> crates/husky-lang/feature/src/eval.rs:42:5
   |
42 |     input: Arc<dyn AnyValueDyn>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unused variable: `ident`
  --> crates/husky-lang/compiler/src/lib.rs:15:38
   |
15 |         scope::ScopeRoute::Builtin { ident } => todo!(),
   |                                      ^^^^^ help: try ignoring the field: `ident: _`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `main`
  --> crates/husky-lang/compiler/src/lib.rs:16:38
   |
16 |         scope::ScopeRoute::Package { main, ident } => todo!(),
   |                                      ^^^^ help: try ignoring the field: `main: _`

warning: unused variable: `ident`
  --> crates/husky-lang/compiler/src/lib.rs:16:44
   |
16 |         scope::ScopeRoute::Package { main, ident } => todo!(),
   |                                            ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `parent`
  --> crates/husky-lang/compiler/src/lib.rs:17:41
   |
17 |         scope::ScopeRoute::ChildScope { parent, ident } => todo!(),
   |                                         ^^^^^^ help: try ignoring the field: `parent: _`

warning: unused variable: `ident`
  --> crates/husky-lang/compiler/src/lib.rs:17:49
   |
17 |         scope::ScopeRoute::ChildScope { parent, ident } => todo!(),
   |                                                 ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `main`
  --> crates/husky-lang/compiler/src/lib.rs:18:39
   |
18 |         scope::ScopeRoute::Implicit { main, ident } => todo!(),
   |                                       ^^^^ help: try ignoring the field: `main: _`

warning: unused variable: `ident`
  --> crates/husky-lang/compiler/src/lib.rs:18:45
   |
18 |         scope::ScopeRoute::Implicit { main, ident } => todo!(),
   |                                             ^^^^^ help: try ignoring the field: `ident: _`

warning: unused variable: `this`
  --> crates/husky-lang/compiler/src/lib.rs:11:5
   |
11 |     this: &dyn Compiler,
   |     ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: `feature` (lib) generated 10 warnings
warning: `compiler` (lib) generated 8 warnings
warning: unused imports: `FeatureExprKind`, `FeatureExpr`
 --> crates/husky-lang/trace/src/alloc/feature_stmt.rs:1:15
  |
1 | use feature::{FeatureExpr, FeatureExprKind, FeatureStmt, FeatureStmtKind};
  |               ^^^^^^^^^^^  ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `FeatureExprKind`, `FeatureExpr`
  --> crates/husky-lang/trace/src/alloc.rs:10:53
   |
10 |     FeatureBlock, FeatureBranch, FeatureBranchKind, FeatureExpr, FeatureExprKind, FeatureStmtKind,
   |                                                     ^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `VMError`
 --> crates/husky-lang/trace/src/interpreter/value.rs:1:26
  |
1 | use vm::{PrimitiveValue, VMError, VMResult};
  |                          ^^^^^^^

warning: unused import: `crate::TokenProps`
 --> crates/husky-lang/trace/src/interpreter/value.rs:3:5
  |
3 | use crate::TokenProps;
  |     ^^^^^^^^^^^^^^^^^

warning: unreachable pattern
  --> crates/husky-lang/trace/src/interpreter/value.rs:20:13
   |
20 |             _ => todo!(),
   |             ^
   |
   = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `feature_block`
  --> crates/husky-lang/trace/src/alloc.rs:68:29
   |
68 |             TraceKind::Main(feature_block) => vec![TokenProps {
   |                             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_feature_block`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `id`
  --> crates/husky-lang/trace/src/alloc.rs:62:9
   |
62 |         id: TraceId,
   |         ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `varname`
  --> crates/husky-lang/trace/src/interpreter.rs:84:34
   |
84 |             DeclStmtKind::Init { varname, ref value } => todo!(),
   |                                  ^^^^^^^ help: try ignoring the field: `varname: _`

warning: unused variable: `value`
  --> crates/husky-lang/trace/src/interpreter.rs:84:43
   |
84 |             DeclStmtKind::Init { varname, ref value } => todo!(),
   |                                           ^^^^^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `condition`
  --> crates/husky-lang/trace/src/interpreter.rs:85:36
   |
85 |             DeclStmtKind::Assert { ref condition } => todo!(),
   |                                    ^^^^^^^^^^^^^ help: try ignoring the field: `condition: _`

warning: unused variable: `kind`
  --> crates/husky-lang/trace/src/interpreter.rs:94:38
   |
94 |             DeclStmtKind::Branches { kind, ref branches } => todo!(),
   |                                      ^^^^ help: try ignoring the field: `kind: _`

warning: unused variable: `branches`
  --> crates/husky-lang/trace/src/interpreter.rs:94:44
   |
94 |             DeclStmtKind::Branches { kind, ref branches } => todo!(),
   |                                            ^^^^^^^^^^^^ help: try ignoring the field: `branches: _`

warning: unused variable: `func`
   --> crates/husky-lang/trace/src/interpreter.rs:154:29
    |
154 | ...                   func,
    |                       ^^^^ help: try ignoring the field: `func: _`

warning: unused variable: `scope_expr_range`
   --> crates/husky-lang/trace/src/interpreter.rs:155:29
    |
155 | ...                   scope_expr_range,
    |                       ^^^^^^^^^^^^^^^^ help: try ignoring the field: `scope_expr_range: _`

warning: unused variable: `scope`
   --> crates/husky-lang/trace/src/interpreter.rs:107:31
    |
107 |             ExprKind::Scope { scope, compiled } => todo!(),
    |                               ^^^^^ help: try ignoring the field: `scope: _`

warning: unused variable: `compiled`
   --> crates/husky-lang/trace/src/interpreter.rs:107:38
    |
107 |             ExprKind::Scope { scope, compiled } => todo!(),
    |                                      ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `compiled`
   --> crates/husky-lang/trace/src/interpreter.rs:112:17
    |
112 |                 compiled,
    |                 ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `rel_idx`
   --> crates/husky-lang/trace/src/interpreter.rs:171:19
    |
171 |     fn var(&self, rel_idx: usize) -> vm::VMResult<&StackValue<'static, 'static>> {
    |                   ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rel_idx`

warning: unused variable: `rel_idx`
   --> crates/husky-lang/trace/src/interpreter.rs:175:27
    |
175 |     fn var_mut(&mut self, rel_idx: usize) -> vm::VMResult<&mut StackValue<'static, 'static>> {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rel_idx`

warning: unused variable: `value`
   --> crates/husky-lang/trace/src/interpreter.rs:183:24
    |
183 |     fn push(&mut self, value: StackValue<'static, 'static>) {
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `new_len`
   --> crates/husky-lang/trace/src/interpreter.rs:191:25
    |
191 |     fn drain(&mut self, new_len: usize) -> Vec<StackValue<'static, 'static>> {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_len`

warning: unused variable: `scope`
  --> crates/husky-lang/trace/src/alloc/expr.rs:31:42
   |
31 |             semantics::ExprKind::Scope { scope, compiled } => todo!(),
   |                                          ^^^^^ help: try ignoring the field: `scope: _`

warning: unused variable: `compiled`
  --> crates/husky-lang/trace/src/alloc/expr.rs:31:49
   |
31 |             semantics::ExprKind::Scope { scope, compiled } => todo!(),
   |                                                 ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `compiled`
  --> crates/husky-lang/trace/src/alloc/expr.rs:36:17
   |
36 |                 compiled,
   |                 ^^^^^^^^ help: try ignoring the field: `compiled: _`

warning: unused variable: `this`
  --> crates/husky-lang/trace/src/alloc/expr.rs:41:51
   |
41 |                     semantics::Opn::Binary { opr, this, kind } => {
   |                                                   ^^^^ help: try ignoring the field: `this: _`

warning: unused variable: `kind`
  --> crates/husky-lang/trace/src/alloc/expr.rs:41:57
   |
41 |                     semantics::Opn::Binary { opr, this, kind } => {
   |                                                         ^^^^ help: try ignoring the field: `kind: _`

warning: unused variable: `func`
  --> crates/husky-lang/trace/src/alloc/expr.rs:49:25
   |
49 |                         func,
   |                         ^^^^ help: try ignoring the field: `func: _`

warning: unused variable: `scope_expr_range`
  --> crates/husky-lang/trace/src/alloc/expr.rs:50:25
   |
50 |                         scope_expr_range,
   |                         ^^^^^^^^^^^^^^^^ help: try ignoring the field: `scope_expr_range: _`

warning: unused variable: `trace_allocator`
  --> crates/husky-lang/trace/src/alloc/feature_branch.rs:25:9
   |
25 |         trace_allocator: &TraceAllocator,
   |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_trace_allocator`

warning: unused variable: `func`
  --> crates/husky-lang/trace/src/alloc/feature_expr.rs:29:17
   |
29 |                 func,
   |                 ^^^^ help: try ignoring the field: `func: _`

warning: unused variable: `input`
  --> crates/husky-lang/trace/src/alloc/feature_expr.rs:40:21
   |
40 |                 for input in inputs {
   |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `func`
  --> crates/husky-lang/trace/src/alloc/feature_expr.rs:69:17
   |
69 |                 func,
   |                 ^^^^ help: try ignoring the field: `func: _`

warning: unused variable: `input`
  --> crates/husky-lang/trace/src/alloc/feature_expr.rs:75:21
   |
75 |                 for input in inputs {
   |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: field is never read: `values`
  --> crates/husky-lang/trace/src/interpreter.rs:15:5
   |
15 |     values: HashMap<usize, StackValue<'static, 'static>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field is never read: `instruction_sheet`
  --> crates/husky-lang/trace/src/interpreter.rs:16:5
   |
16 |     instruction_sheet: Arc<InstructionSheet>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `trace` (lib) generated 35 warnings
warning: unused import: `trace::TraceAllocator`
 --> crates/husky-lang/debugger/src/gui/response.rs:1:5
  |
1 | use trace::TraceAllocator;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `de::DeserializeOwned`
 --> crates/husky-lang/debugger/src/notif.rs:3:13
  |
3 | use serde::{de::DeserializeOwned, Deserialize, Serialize};
  |             ^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `f`
  --> crates/husky-lang/debugger/src/error.rs:17:19
   |
17 |     fn fmt(&self, f: &mut common::Formatter<'_>) -> std::fmt::Result {
   |                   ^ help: if this is intentional, prefix it with an underscore: `_f`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: `husky-lang-debugger` (lib) generated 3 warnings
warning: unused import: `common::p`
 --> crates/husky-lang/debugger/src/bin/main.rs:1:5
  |
1 | use common::p;
  |     ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `husky-lang-debugger` (bin "husky-lang-debugger") generated 1 warning
    Finished dev [unoptimized + debuginfo] target(s) in 0.08s
     Running `target/debug/husky-lang-debugger projects/tests/current`
[pin] src: crates/husky-lang/debugger/src/lib.rs:82.

-------------------------------------------------------------------
[32mcrates/husky-lang/trace/src/alloc/feature_expr.rs:[38;2;220;180;55m34:[0m
[38;2;250;50;155mscope_expr_range[0m = TextRange {
    start: 8:8,
    end: 8:9,
}
[pin] src: crates/husky-lang/debugger/src/lib.rs:88.
[pin] src: crates/husky-lang/debugger/src/lib.rs:94.

-------------------------------------------------------------------
[32mcrates/husky-lang/debugger/src/lib.rs:[38;2;220;180;55m95:[0m
[38;2;250;50;155meffective_opt_input_id_for_subtraces[0m = None

-------------------------------------------------------------------
[32mcrates/husky-lang/debugger/src/lib.rs:[38;2;220;180;55m96:[0m
[38;2;250;50;155msubtraces[0m = [
    Trace {
        parent: Some(
            TraceId(
                0,
            ),
        ),
        id: TraceId(
            1,
        ),
        indent: 4,
        kind: FeatureStmt(
            FeatureStmt {
                indent: 4,
                kind: Init {
                    varname: a,
                    value: FeatureExpr {
                        kind: Literal(
                            1(i32),
                        ),
                        feature: Literal(1(i32)),
                        eval_id: FeatureEvalId(
                            0,
                        ),
                        range: TextRange {
                            start: 7:8,
                            end: 7:9,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                },
                feature: None,
                file: "projects/tests/current/main.hsk",
                range: TextRange {
                    start: 7:4,
                    end: 7:9,
                },
                eval_id: FeatureEvalId(
                    0,
                ),
            },
        ),
        tokens: [
            TokenProps {
                kind: Ident,
                value: "a",
                associated_trace: None,
            },
            TokenProps {
                kind: Special,
                value: " = ",
                associated_trace: None,
            },
            TokenProps {
                kind: Literal,
                value: "1",
                associated_trace: None,
            },
        ],
        range: TextRange {
            start: 7:4,
            end: 7:9,
        },
        file: "projects/tests/current/main.hsk",
    },
    Trace {
        parent: Some(
            TraceId(
                0,
            ),
        ),
        id: TraceId(
            3,
        ),
        indent: 4,
        kind: FeatureStmt(
            FeatureStmt {
                indent: 4,
                kind: Init {
                    varname: b,
                    value: FeatureExpr {
                        kind: FuncCall {
                            func: (package "projects/tests/current/main.hsk") current::f,
                            scope_expr_range: TextRange {
                                start: 8:8,
                                end: 8:9,
                            },
                            uid: Uid {
                                raw: 0,
                            },
                            callee_file: "projects/tests/current/main.hsk",
                            input_contracts: [],
                            inputs: [],
                            compiled: None,
                            instruction_sheet: InstructionSheet {
                                instructions: [
                                    Instruction {
                                        kind: PushPrimitive(
                                            1(i32),
                                        ),
                                    },
                                    Instruction {
                                        kind: PushPrimitive(
                                            1(i32),
                                        ),
                                    },
                                    Instruction {
                                        kind: PrimitiveOpn(
                                            Binary(
                                                Add,
                                            ),
                                        ),
                                    },
                                    Instruction {
                                        kind: Return,
                                    },
                                ],
                                correspondence: (),
                            },
                            stmts: [
                                DeclStmt {
                                    file: "projects/tests/current/main.hsk",
                                    range: TextRange {
                                        start: 1:4,
                                        end: 1:9,
                                    },
                                    indent: 4,
                                    kind: Return {
                                        result: Expr {
                                            file: "projects/tests/current/main.hsk",
                                            range: TextRange {
                                                start: 1:4,
                                                end: 1:9,
                                            },
                                            ty: I32,
                                            kind: Opn {
                                                opn: Binary {
                                                    opr: Add,
                                                    this: I32,
                                                    kind: AddI32,
                                                },
                                                compiled: None,
                                                opds: [
                                                    Expr {
                                                        file: "projects/tests/current/main.hsk",
                                                        range: TextRange {
                                                            start: 1:4,
                                                            end: 1:5,
                                                        },
                                                        ty: I32,
                                                        kind: Literal(
                                                            1(i32),
                                                        ),
                                                    },
                                                    Expr {
                                                        file: "projects/tests/current/main.hsk",
                                                        range: TextRange {
                                                            start: 1:8,
                                                            end: 1:9,
                                                        },
                                                        ty: I32,
                                                        kind: Literal(
                                                            1(i32),
                                                        ),
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ],
                        },
                        feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                        eval_id: FeatureEvalId(
                            0,
                        ),
                        range: TextRange {
                            start: 8:9,
                            end: 8:11,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                },
                feature: None,
                file: "projects/tests/current/main.hsk",
                range: TextRange {
                    start: 8:4,
                    end: 8:11,
                },
                eval_id: FeatureEvalId(
                    0,
                ),
            },
        ),
        tokens: [
            TokenProps {
                kind: Ident,
                value: "b",
                associated_trace: None,
            },
            TokenProps {
                kind: Special,
                value: " = ",
                associated_trace: None,
            },
            TokenProps {
                kind: Scope,
                value: "f",
                associated_trace: Some(
                    Trace {
                        parent: None,
                        id: TraceId(
                            4,
                        ),
                        indent: 8,
                        kind: FeatureExpr(
                            FeatureExpr {
                                kind: FuncCall {
                                    func: (package "projects/tests/current/main.hsk") current::f,
                                    scope_expr_range: TextRange {
                                        start: 8:8,
                                        end: 8:9,
                                    },
                                    uid: Uid {
                                        raw: 0,
                                    },
                                    callee_file: "projects/tests/current/main.hsk",
                                    input_contracts: [],
                                    inputs: [],
                                    compiled: None,
                                    instruction_sheet: InstructionSheet {
                                        instructions: [
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PrimitiveOpn(
                                                    Binary(
                                                        Add,
                                                    ),
                                                ),
                                            },
                                            Instruction {
                                                kind: Return,
                                            },
                                        ],
                                        correspondence: (),
                                    },
                                    stmts: [
                                        DeclStmt {
                                            file: "projects/tests/current/main.hsk",
                                            range: TextRange {
                                                start: 1:4,
                                                end: 1:9,
                                            },
                                            indent: 4,
                                            kind: Return {
                                                result: Expr {
                                                    file: "projects/tests/current/main.hsk",
                                                    range: TextRange {
                                                        start: 1:4,
                                                        end: 1:9,
                                                    },
                                                    ty: I32,
                                                    kind: Opn {
                                                        opn: Binary {
                                                            opr: Add,
                                                            this: I32,
                                                            kind: AddI32,
                                                        },
                                                        compiled: None,
                                                        opds: [
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:4,
                                                                    end: 1:5,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:8,
                                                                    end: 1:9,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                    ],
                                },
                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 8:9,
                                    end: 8:11,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                        ),
                        tokens: [
                            TokenProps {
                                kind: Scope,
                                value: "f",
                                associated_trace: None,
                            },
                            TokenProps {
                                kind: Special,
                                value: "(",
                                associated_trace: None,
                            },
                            TokenProps {
                                kind: Special,
                                value: ")",
                                associated_trace: None,
                            },
                        ],
                        range: TextRange {
                            start: 8:9,
                            end: 8:11,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                ),
            },
            TokenProps {
                kind: Special,
                value: "(",
                associated_trace: None,
            },
            TokenProps {
                kind: Special,
                value: ")",
                associated_trace: None,
            },
        ],
        range: TextRange {
            start: 8:4,
            end: 8:11,
        },
        file: "projects/tests/current/main.hsk",
    },
    Trace {
        parent: Some(
            TraceId(
                0,
            ),
        ),
        id: TraceId(
            5,
        ),
        indent: 4,
        kind: FeatureStmt(
            FeatureStmt {
                indent: 4,
                kind: Assert {
                    condition: FeatureExpr {
                        kind: PrimitiveBinaryOpr {
                            opr: Eq,
                            lopd: FeatureExpr {
                                kind: Variable {
                                    varname: a,
                                    value: FeatureExpr {
                                        kind: Literal(
                                            1(i32),
                                        ),
                                        feature: Literal(1(i32)),
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 7:8,
                                            end: 7:9,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                },
                                feature: Literal(1(i32)),
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 9:11,
                                    end: 9:12,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                            ropd: FeatureExpr {
                                kind: Variable {
                                    varname: b,
                                    value: FeatureExpr {
                                        kind: FuncCall {
                                            func: (package "projects/tests/current/main.hsk") current::f,
                                            scope_expr_range: TextRange {
                                                start: 8:8,
                                                end: 8:9,
                                            },
                                            uid: Uid {
                                                raw: 0,
                                            },
                                            callee_file: "projects/tests/current/main.hsk",
                                            input_contracts: [],
                                            inputs: [],
                                            compiled: None,
                                            instruction_sheet: InstructionSheet {
                                                instructions: [
                                                    Instruction {
                                                        kind: PushPrimitive(
                                                            1(i32),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: PushPrimitive(
                                                            1(i32),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: PrimitiveOpn(
                                                            Binary(
                                                                Add,
                                                            ),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: Return,
                                                    },
                                                ],
                                                correspondence: (),
                                            },
                                            stmts: [
                                                DeclStmt {
                                                    file: "projects/tests/current/main.hsk",
                                                    range: TextRange {
                                                        start: 1:4,
                                                        end: 1:9,
                                                    },
                                                    indent: 4,
                                                    kind: Return {
                                                        result: Expr {
                                                            file: "projects/tests/current/main.hsk",
                                                            range: TextRange {
                                                                start: 1:4,
                                                                end: 1:9,
                                                            },
                                                            ty: I32,
                                                            kind: Opn {
                                                                opn: Binary {
                                                                    opr: Add,
                                                                    this: I32,
                                                                    kind: AddI32,
                                                                },
                                                                compiled: None,
                                                                opds: [
                                                                    Expr {
                                                                        file: "projects/tests/current/main.hsk",
                                                                        range: TextRange {
                                                                            start: 1:4,
                                                                            end: 1:5,
                                                                        },
                                                                        ty: I32,
                                                                        kind: Literal(
                                                                            1(i32),
                                                                        ),
                                                                    },
                                                                    Expr {
                                                                        file: "projects/tests/current/main.hsk",
                                                                        range: TextRange {
                                                                            start: 1:8,
                                                                            end: 1:9,
                                                                        },
                                                                        ty: I32,
                                                                        kind: Literal(
                                                                            1(i32),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    },
                                                },
                                            ],
                                        },
                                        feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 8:9,
                                            end: 8:11,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                },
                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 9:12,
                                    end: 9:17,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                        },
                        feature: PrimitiveBinaryOpr { opr: Eq, lopd: Literal(1(i32)), ropd: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] } },
                        eval_id: FeatureEvalId(
                            0,
                        ),
                        range: TextRange {
                            start: 9:11,
                            end: 9:17,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                },
                feature: Some(
                    Assert { condition: PrimitiveBinaryOpr { opr: Eq, lopd: Literal(1(i32)), ropd: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] } } },
                ),
                file: "projects/tests/current/main.hsk",
                range: TextRange {
                    start: 9:11,
                    end: 9:17,
                },
                eval_id: FeatureEvalId(
                    0,
                ),
            },
        ),
        tokens: [
            TokenProps {
                kind: Keyword,
                value: "assert ",
                associated_trace: None,
            },
            TokenProps {
                kind: Ident,
                value: "a",
                associated_trace: Some(
                    Trace {
                        parent: None,
                        id: TraceId(
                            7,
                        ),
                        indent: 8,
                        kind: FeatureExpr(
                            FeatureExpr {
                                kind: Variable {
                                    varname: a,
                                    value: FeatureExpr {
                                        kind: Literal(
                                            1(i32),
                                        ),
                                        feature: Literal(1(i32)),
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 7:8,
                                            end: 7:9,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                },
                                feature: Literal(1(i32)),
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 9:11,
                                    end: 9:12,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                        ),
                        tokens: [
                            TokenProps {
                                kind: Ident,
                                value: "a",
                                associated_trace: None,
                            },
                        ],
                        range: TextRange {
                            start: 9:11,
                            end: 9:12,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                ),
            },
            TokenProps {
                kind: Special,
                value: " == ",
                associated_trace: Some(
                    Trace {
                        parent: None,
                        id: TraceId(
                            6,
                        ),
                        indent: 8,
                        kind: FeatureExpr(
                            FeatureExpr {
                                kind: PrimitiveBinaryOpr {
                                    opr: Eq,
                                    lopd: FeatureExpr {
                                        kind: Variable {
                                            varname: a,
                                            value: FeatureExpr {
                                                kind: Literal(
                                                    1(i32),
                                                ),
                                                feature: Literal(1(i32)),
                                                eval_id: FeatureEvalId(
                                                    0,
                                                ),
                                                range: TextRange {
                                                    start: 7:8,
                                                    end: 7:9,
                                                },
                                                file: "projects/tests/current/main.hsk",
                                            },
                                        },
                                        feature: Literal(1(i32)),
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 9:11,
                                            end: 9:12,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                    ropd: FeatureExpr {
                                        kind: Variable {
                                            varname: b,
                                            value: FeatureExpr {
                                                kind: FuncCall {
                                                    func: (package "projects/tests/current/main.hsk") current::f,
                                                    scope_expr_range: TextRange {
                                                        start: 8:8,
                                                        end: 8:9,
                                                    },
                                                    uid: Uid {
                                                        raw: 0,
                                                    },
                                                    callee_file: "projects/tests/current/main.hsk",
                                                    input_contracts: [],
                                                    inputs: [],
                                                    compiled: None,
                                                    instruction_sheet: InstructionSheet {
                                                        instructions: [
                                                            Instruction {
                                                                kind: PushPrimitive(
                                                                    1(i32),
                                                                ),
                                                            },
                                                            Instruction {
                                                                kind: PushPrimitive(
                                                                    1(i32),
                                                                ),
                                                            },
                                                            Instruction {
                                                                kind: PrimitiveOpn(
                                                                    Binary(
                                                                        Add,
                                                                    ),
                                                                ),
                                                            },
                                                            Instruction {
                                                                kind: Return,
                                                            },
                                                        ],
                                                        correspondence: (),
                                                    },
                                                    stmts: [
                                                        DeclStmt {
                                                            file: "projects/tests/current/main.hsk",
                                                            range: TextRange {
                                                                start: 1:4,
                                                                end: 1:9,
                                                            },
                                                            indent: 4,
                                                            kind: Return {
                                                                result: Expr {
                                                                    file: "projects/tests/current/main.hsk",
                                                                    range: TextRange {
                                                                        start: 1:4,
                                                                        end: 1:9,
                                                                    },
                                                                    ty: I32,
                                                                    kind: Opn {
                                                                        opn: Binary {
                                                                            opr: Add,
                                                                            this: I32,
                                                                            kind: AddI32,
                                                                        },
                                                                        compiled: None,
                                                                        opds: [
                                                                            Expr {
                                                                                file: "projects/tests/current/main.hsk",
                                                                                range: TextRange {
                                                                                    start: 1:4,
                                                                                    end: 1:5,
                                                                                },
                                                                                ty: I32,
                                                                                kind: Literal(
                                                                                    1(i32),
                                                                                ),
                                                                            },
                                                                            Expr {
                                                                                file: "projects/tests/current/main.hsk",
                                                                                range: TextRange {
                                                                                    start: 1:8,
                                                                                    end: 1:9,
                                                                                },
                                                                                ty: I32,
                                                                                kind: Literal(
                                                                                    1(i32),
                                                                                ),
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    ],
                                                },
                                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                                eval_id: FeatureEvalId(
                                                    0,
                                                ),
                                                range: TextRange {
                                                    start: 8:9,
                                                    end: 8:11,
                                                },
                                                file: "projects/tests/current/main.hsk",
                                            },
                                        },
                                        feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 9:12,
                                            end: 9:17,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                },
                                feature: PrimitiveBinaryOpr { opr: Eq, lopd: Literal(1(i32)), ropd: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] } },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 9:11,
                                    end: 9:17,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                        ),
                        tokens: [
                            TokenProps {
                                kind: Ident,
                                value: "a",
                                associated_trace: None,
                            },
                            TokenProps {
                                kind: Special,
                                value: " == ",
                                associated_trace: None,
                            },
                            TokenProps {
                                kind: Ident,
                                value: "b",
                                associated_trace: None,
                            },
                        ],
                        range: TextRange {
                            start: 9:11,
                            end: 9:17,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                ),
            },
            TokenProps {
                kind: Ident,
                value: "b",
                associated_trace: Some(
                    Trace {
                        parent: None,
                        id: TraceId(
                            8,
                        ),
                        indent: 8,
                        kind: FeatureExpr(
                            FeatureExpr {
                                kind: Variable {
                                    varname: b,
                                    value: FeatureExpr {
                                        kind: FuncCall {
                                            func: (package "projects/tests/current/main.hsk") current::f,
                                            scope_expr_range: TextRange {
                                                start: 8:8,
                                                end: 8:9,
                                            },
                                            uid: Uid {
                                                raw: 0,
                                            },
                                            callee_file: "projects/tests/current/main.hsk",
                                            input_contracts: [],
                                            inputs: [],
                                            compiled: None,
                                            instruction_sheet: InstructionSheet {
                                                instructions: [
                                                    Instruction {
                                                        kind: PushPrimitive(
                                                            1(i32),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: PushPrimitive(
                                                            1(i32),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: PrimitiveOpn(
                                                            Binary(
                                                                Add,
                                                            ),
                                                        ),
                                                    },
                                                    Instruction {
                                                        kind: Return,
                                                    },
                                                ],
                                                correspondence: (),
                                            },
                                            stmts: [
                                                DeclStmt {
                                                    file: "projects/tests/current/main.hsk",
                                                    range: TextRange {
                                                        start: 1:4,
                                                        end: 1:9,
                                                    },
                                                    indent: 4,
                                                    kind: Return {
                                                        result: Expr {
                                                            file: "projects/tests/current/main.hsk",
                                                            range: TextRange {
                                                                start: 1:4,
                                                                end: 1:9,
                                                            },
                                                            ty: I32,
                                                            kind: Opn {
                                                                opn: Binary {
                                                                    opr: Add,
                                                                    this: I32,
                                                                    kind: AddI32,
                                                                },
                                                                compiled: None,
                                                                opds: [
                                                                    Expr {
                                                                        file: "projects/tests/current/main.hsk",
                                                                        range: TextRange {
                                                                            start: 1:4,
                                                                            end: 1:5,
                                                                        },
                                                                        ty: I32,
                                                                        kind: Literal(
                                                                            1(i32),
                                                                        ),
                                                                    },
                                                                    Expr {
                                                                        file: "projects/tests/current/main.hsk",
                                                                        range: TextRange {
                                                                            start: 1:8,
                                                                            end: 1:9,
                                                                        },
                                                                        ty: I32,
                                                                        kind: Literal(
                                                                            1(i32),
                                                                        ),
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    },
                                                },
                                            ],
                                        },
                                        feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                        eval_id: FeatureEvalId(
                                            0,
                                        ),
                                        range: TextRange {
                                            start: 8:9,
                                            end: 8:11,
                                        },
                                        file: "projects/tests/current/main.hsk",
                                    },
                                },
                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 9:12,
                                    end: 9:17,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                        ),
                        tokens: [
                            TokenProps {
                                kind: Ident,
                                value: "b",
                                associated_trace: None,
                            },
                        ],
                        range: TextRange {
                            start: 9:12,
                            end: 9:17,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                ),
            },
        ],
        range: TextRange {
            start: 9:11,
            end: 9:17,
        },
        file: "projects/tests/current/main.hsk",
    },
    Trace {
        parent: Some(
            TraceId(
                0,
            ),
        ),
        id: TraceId(
            9,
        ),
        indent: 4,
        kind: FeatureBranch(
            FeatureBranch {
                block: FeatureBlock {
                    symbols: [
                        FeatureSymbol {
                            varname: a,
                            value: FeatureExpr {
                                kind: Literal(
                                    1(i32),
                                ),
                                feature: Literal(1(i32)),
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 7:8,
                                    end: 7:9,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                            feature: Literal(1(i32)),
                        },
                        FeatureSymbol {
                            varname: b,
                            value: FeatureExpr {
                                kind: FuncCall {
                                    func: (package "projects/tests/current/main.hsk") current::f,
                                    scope_expr_range: TextRange {
                                        start: 8:8,
                                        end: 8:9,
                                    },
                                    uid: Uid {
                                        raw: 0,
                                    },
                                    callee_file: "projects/tests/current/main.hsk",
                                    input_contracts: [],
                                    inputs: [],
                                    compiled: None,
                                    instruction_sheet: InstructionSheet {
                                        instructions: [
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PrimitiveOpn(
                                                    Binary(
                                                        Add,
                                                    ),
                                                ),
                                            },
                                            Instruction {
                                                kind: Return,
                                            },
                                        ],
                                        correspondence: (),
                                    },
                                    stmts: [
                                        DeclStmt {
                                            file: "projects/tests/current/main.hsk",
                                            range: TextRange {
                                                start: 1:4,
                                                end: 1:9,
                                            },
                                            indent: 4,
                                            kind: Return {
                                                result: Expr {
                                                    file: "projects/tests/current/main.hsk",
                                                    range: TextRange {
                                                        start: 1:4,
                                                        end: 1:9,
                                                    },
                                                    ty: I32,
                                                    kind: Opn {
                                                        opn: Binary {
                                                            opr: Add,
                                                            this: I32,
                                                            kind: AddI32,
                                                        },
                                                        compiled: None,
                                                        opds: [
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:4,
                                                                    end: 1:5,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:8,
                                                                    end: 1:9,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                    ],
                                },
                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 8:9,
                                    end: 8:11,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                            feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                        },
                    ],
                    stmts: [
                        FeatureStmt {
                            indent: 8,
                            kind: Return {
                                result: FeatureExpr {
                                    kind: Literal(
                                        1(i32),
                                    ),
                                    feature: Literal(1(i32)),
                                    eval_id: FeatureEvalId(
                                        0,
                                    ),
                                    range: TextRange {
                                        start: 11:8,
                                        end: 11:9,
                                    },
                                    file: "projects/tests/current/main.hsk",
                                },
                            },
                            feature: Some(
                                Literal(1(i32)),
                            ),
                            file: "projects/tests/current/main.hsk",
                            range: TextRange {
                                start: 11:8,
                                end: 11:9,
                            },
                            eval_id: FeatureEvalId(
                                0,
                            ),
                        },
                    ],
                    feature: Block([Literal(1(i32))]),
                    file: "projects/tests/current/main.hsk",
                    range: TextRange {
                        start: 11:8,
                        end: 11:9,
                    },
                    eval_id: FeatureEvalId(
                        0,
                    ),
                },
                kind: If {
                    condition: FeatureExpr {
                        kind: Literal(
                            Bool(
                                true,
                            ),
                        ),
                        feature: Literal(Bool(true)),
                        eval_id: FeatureEvalId(
                            0,
                        ),
                        range: TextRange {
                            start: 10:7,
                            end: 10:11,
                        },
                        file: "projects/tests/current/main.hsk",
                    },
                },
                eval_id: FeatureEvalId(
                    0,
                ),
            },
        ),
        tokens: [
            TokenProps {
                kind: Keyword,
                value: "if ",
                associated_trace: None,
            },
            TokenProps {
                kind: Literal,
                value: "true",
                associated_trace: None,
            },
        ],
        range: TextRange {
            start: 11:8,
            end: 11:9,
        },
        file: "projects/tests/current/main.hsk",
    },
    Trace {
        parent: Some(
            TraceId(
                0,
            ),
        ),
        id: TraceId(
            10,
        ),
        indent: 4,
        kind: FeatureBranch(
            FeatureBranch {
                block: FeatureBlock {
                    symbols: [
                        FeatureSymbol {
                            varname: a,
                            value: FeatureExpr {
                                kind: Literal(
                                    1(i32),
                                ),
                                feature: Literal(1(i32)),
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 7:8,
                                    end: 7:9,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                            feature: Literal(1(i32)),
                        },
                        FeatureSymbol {
                            varname: b,
                            value: FeatureExpr {
                                kind: FuncCall {
                                    func: (package "projects/tests/current/main.hsk") current::f,
                                    scope_expr_range: TextRange {
                                        start: 8:8,
                                        end: 8:9,
                                    },
                                    uid: Uid {
                                        raw: 0,
                                    },
                                    callee_file: "projects/tests/current/main.hsk",
                                    input_contracts: [],
                                    inputs: [],
                                    compiled: None,
                                    instruction_sheet: InstructionSheet {
                                        instructions: [
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PushPrimitive(
                                                    1(i32),
                                                ),
                                            },
                                            Instruction {
                                                kind: PrimitiveOpn(
                                                    Binary(
                                                        Add,
                                                    ),
                                                ),
                                            },
                                            Instruction {
                                                kind: Return,
                                            },
                                        ],
                                        correspondence: (),
                                    },
                                    stmts: [
                                        DeclStmt {
                                            file: "projects/tests/current/main.hsk",
                                            range: TextRange {
                                                start: 1:4,
                                                end: 1:9,
                                            },
                                            indent: 4,
                                            kind: Return {
                                                result: Expr {
                                                    file: "projects/tests/current/main.hsk",
                                                    range: TextRange {
                                                        start: 1:4,
                                                        end: 1:9,
                                                    },
                                                    ty: I32,
                                                    kind: Opn {
                                                        opn: Binary {
                                                            opr: Add,
                                                            this: I32,
                                                            kind: AddI32,
                                                        },
                                                        compiled: None,
                                                        opds: [
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:4,
                                                                    end: 1:5,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                            Expr {
                                                                file: "projects/tests/current/main.hsk",
                                                                range: TextRange {
                                                                    start: 1:8,
                                                                    end: 1:9,
                                                                },
                                                                ty: I32,
                                                                kind: Literal(
                                                                    1(i32),
                                                                ),
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                    ],
                                },
                                feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                                eval_id: FeatureEvalId(
                                    0,
                                ),
                                range: TextRange {
                                    start: 8:9,
                                    end: 8:11,
                                },
                                file: "projects/tests/current/main.hsk",
                            },
                            feature: FuncCall { func: (package "projects/tests/current/main.hsk") current::f, uid: Uid { raw: 0 }, inputs: [] },
                        },
                    ],
                    stmts: [
                        FeatureStmt {
                            indent: 8,
                            kind: Return {
                                result: FeatureExpr {
                                    kind: Literal(
                                        2(i32),
                                    ),
                                    feature: Literal(2(i32)),
                                    eval_id: FeatureEvalId(
                                        0,
                                    ),
                                    range: TextRange {
                                        start: 13:8,
                                        end: 13:9,
                                    },
                                    file: "projects/tests/current/main.hsk",
                                },
                            },
                            feature: Some(
                                Literal(2(i32)),
                            ),
                            file: "projects/tests/current/main.hsk",
                            range: TextRange {
                                start: 13:8,
                                end: 13:9,
                            },
                            eval_id: FeatureEvalId(
                                0,
                            ),
                        },
                    ],
                    feature: Block([Literal(2(i32))]),
                    file: "projects/tests/current/main.hsk",
                    range: TextRange {
                        start: 13:8,
                        end: 13:9,
                    },
                    eval_id: FeatureEvalId(
                        0,
                    ),
                },
                kind: Else,
                eval_id: FeatureEvalId(
                    0,
                ),
            },
        ),
        tokens: [
            TokenProps {
                kind: Keyword,
                value: "else ",
                associated_trace: None,
            },
        ],
        range: TextRange {
            start: 13:8,
            end: 13:9,
        },
        file: "projects/tests/current/main.hsk",
    },
]
make: *** [Makefile:4: run] Interrupt
