[workspace]
members = [
    "crates/abstractions/*",
    "crates/apps/*",
    "crates/archs/*",
    "crates/comptime/*",
    "crates/devtime/*",
    "crates/devtools/*",
    "crates/fs/*",
    "crates/gui/*",
    "crates/ide/*",
    "crates/kernel/*",
    "crates/lex/*",
    "crates/linkage/*",
    "crates/linktime/*",
    "crates/protocols/*",
    "crates/runtime/*",
    "crates/semantics/*",
    "crates/syntax/*",
    "crates/tasks/*",
    "crates/utils/*",
    "crates/vm/*",
    "crates/benchmarks/*",
    "library/core",
    "registry/*"
]
resolver = "2"

[profile.dev]
opt-level = 0
panic = "unwind"

[profile.test]
opt-level = 0

[profile.release]
opt-level = 3
lto = false

[workspace.dependencies]
cargo = "0.76.0"
cargo-manifest = "0.13.0"
atomic_enum = "0.2.0"
itertools = "0.12.0"
axum = { version = "0.7.4" }
clap = { version = "4.4.6", features = ["derive"] }
colored = "2.0.0"
dashmap = "5.5.1"
ecolor = { version = "0.25.0", features = ["serde", "bytemuck"] }
eframe = "0.25.0"
egui = { version = "0.25.0", features = [
    "callstack",
    "extra_debug_asserts",
    "extra_asserts",
    "document-features"
] }
either = "1.8.1"
epaint = "0.25.0"
expect-test = "1.4.1"
flurry = "0.4.0"
futures = "0.3.28"
futures-util = { version = "0.3", default-features = false, features = [
    "sink",
    "std"
] }
fxhash = "0.2.1"
image = "0.24.8"
imageproc = "0.23.0"
lazy_static = "1.4.0"
libloading = "0.8.1"
lsp-types = { version = "=0.95.0", features = ["proposed"] }
ndarray = "0.15.6"
ndarray-stats = "0.5.1"
once_cell = "1.19.0"
ordered-float = { version = "4.1.0", features = ["serde"] }
parking_lot = "0.12.1"
paste = "1.0.6"
pathdiff = "0.2.1"
proc-macro2 = "1.0.69"
rust-optimal-transport = { version = "0.2", features = ["blas"] }
rustc_version = "0.4"
quote = "1.0"
serde = { version = "1.0.106", features = ["derive"] }
serde_json = { version = "1.0.48", features = ["preserve_order"] }
serde_with = "3.4.0"
# turn on "union" to guarantee the size of SmallVec is unaffected by dependencies
smallvec = { version = "1.12", features = ["union", "serde"] }
syn = { version = "2.0.38", features = ["full", "extra-traits", "visit-mut"] }
thiserror = "1.0.37"
tokio = { version = "1.32.0", features = ["full"] }
tokio-stream = { version = "0.1.9" }
tokio-tungstenite = { version = "0.21" }
toml = "0.8.8"
toml_edit = "0.21.0"
tracing = "0.1"
xxhash-rust = { version = "0.8.5" }
tower = { version = "0.4", features = ["util"] }
tower-http = { version = "0.5.1", features = ["fs", "trace"] }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
rustc-hash = "1.1.0"
# abstractions
alt-option = { path = "crates/abstractions/alt-option" }
enum-class = { path = "crates/abstractions/enum-class" }
enum-class-macros = { path = "crates/abstractions/enum-class-macros" }
enum-index = { path = "crates/abstractions/enum-index" }
enum-index-macros = { path = "crates/abstractions/enum-index-macros" }
idx-arena = { path = "crates/abstractions/idx-arena" }
is = { path = "crates/abstractions/is" }
maybe-result = { path = "crates/abstractions/maybe-result" }
original-error = { path = "crates/abstractions/original-error" }
parsec = { path = "crates/abstractions/parsec" }
propagate = { path = "crates/abstractions/propagate" }
salsa = { path = "crates/abstractions/salsa" }
serde-impl = { path = "crates/abstractions/serde-impl" }
shifted-unsigned-int = { path = "crates/abstractions/shifted-unsigned-int" }
ui = { path = "crates/abstractions/ui" }
vec-like = { path = "crates/abstractions/vec-like" }
with-db = { path = "crates/abstractions/with-db" }
# comptime
husky-dev-comptime = { path = "crates/comptime/husky-dev-comptime" }
husky-rust-transpilation = { path = "crates/comptime/husky-rust-transpilation" }
# fs
husky-corgi-config = { path = "crates/fs/husky-corgi-config" }
husky-manifest = { path = "crates/fs/husky-manifest" }
husky-toolchain-config = { path = "crates/fs/husky-toolchain-config" }
husky-vfs = { path = "crates/fs/husky-vfs" }
# gui
egui_dock = { path = "crates/gui/egui-dock" }
# hir
husky-hir-decl = { path = "crates/hir/husky-hir-decl" }
husky-hir-defn = { path = "crates/hir/husky-hir-defn" }
husky-hir-eager-expr = { path = "crates/hir/husky-hir-eager-expr" }
husky-hir-expr = { path = "crates/hir/husky-hir-expr" }
husky-hir-lazy-expr = { path = "crates/hir/husky-hir-lazy-expr" }
husky-hir-opr = { path = "crates/hir/husky-hir-opr" }
husky-hir-prelude = { path = "crates/hir/husky-hir-prelude" }
husky-hir-ty = { path = "crates/hir/husky-hir-ty" }
# ide
husky-token-info = { path = "crates/ide/husky-token-info" }
# kernel
husky-coword = { path = "crates/kernel/husky-coword" }
husky-declarative-term = { path = "crates/kernel/husky-declarative-term" }
husky-declarative-ty = { path = "crates/kernel/husky-declarative-ty" }
husky-declarative-signature = { path = "crates/kernel/husky-declarative-signature" }
husky-entity-kind = { path = "crates/kernel/husky-entity-kind" }
husky-entity-path = { path = "crates/kernel/husky-entity-path" }
husky-ethereal-term = { path = "crates/kernel/husky-ethereal-term" }
husky-ethereal-signature = { path = "crates/kernel/husky-ethereal-signature" }
husky-expr = { path = "crates/kernel/husky-expr" }
husky-fluffy-term = { path = "crates/kernel/husky-fluffy-term" }
husky-opr = { path = "crates/kernel/husky-opr" }
husky-scope = { path = "crates/kernel/husky-scope" }
husky-stack-location = { path = "crates/kernel/husky-stack-location" }
husky-term-prelude = { path = "crates/kernel/husky-term-prelude" }
# lex
husky-regional-token = { path = "crates/lex/husky-regional-token" }
husky-token-data = { path = "crates/lex/husky-token-data" }
husky-token = { path = "crates/lex/husky-token" }
husky-text = { path = "crates/lex/husky-text" }
husky-text-span = { path = "crates/lex/husky-text-span" }
# linkage
husky-javelin = { path = "crates/linkage/husky-javelin" }
husky-linkage = { path = "crates/linkage/husky-linkage" }
husky-linkage-impl = { path = "crates/linkage/husky-linkage-impl" }
# linktime
husky-mono-linktime = { path = "crates/linktime/husky-mono-linktime" }
# protocols
husky-entity-protocol = { path = "crates/protocols/husky-entity-protocol" }
husky-graphics2d-visual-protocol = { path = "crates/protocols/husky-graphics2d-visual-protocol" }
husky-text-protocol = { path = "crates/protocols/husky-text-protocol" }
husky-token-protocol = { path = "crates/protocols/husky-token-protocol" }
husky-trace-protocol = { path = "crates/protocols/husky-trace-protocol" }
husky-value-protocol = { path = "crates/protocols/husky-value-protocol" }
husky-visual-protocol = { path = "crates/protocols/husky-visual-protocol" }
# runtime
husky-dev-runtime = { path = "crates/runtime/husky-dev-runtime" }
# semantics
husky-sema-expr = { path = "crates/semantics/husky-sema-expr" }
# syntax
husky-ast = { path = "crates/syntax/husky-ast" }
husky-decl-ast = { path = "crates/syntax/husky-decl-ast" }
husky-defn-ast = { path = "crates/syntax/husky-defn-ast" }
husky-scope-expr = { path = "crates/syntax/husky-scope-expr" }
husky-syn-expr = { path = "crates/syntax/husky-syn-expr" }
husky-syn-decl = { path = "crates/syntax/husky-syn-decl" }
husky-syn-defn = { path = "crates/syntax/husky-syn-defn" }
husky-syn-opr = { path = "crates/syntax/husky-syn-opr" }
husky-entity-tree = { path = "crates/syntax/husky-entity-tree" }
# tasks
husky-task = { path = "crates/tasks/husky-task" }
husky-task-interface = { path = "crates/tasks/husky-task-interface" }
husky-task-interface-macros = { path = "crates/tasks/husky-task-interface-macros" }
husky-io-task = { path = "crates/tasks/husky-io-task" }
husky-ml-task = { path = "crates/tasks/husky-ml-task" }
husky-ml-task-interface = { path = "crates/tasks/husky-ml-task-interface" }
husky-ml-task-interface-macros = { path = "crates/tasks/husky-ml-task-interface-macros" }
# toml
husky-corgi-config-ast = { path = "crates/toml/husky-corgi-config-ast" }
husky-manifest-ast = { path = "crates/toml/husky-manifest-ast" }
husky-toml-ast = { path = "crates/toml/husky-toml-ast" }
husky-toml-token = { path = "crates/toml/husky-toml-token" }
husky-toolchain-config-ast = { path = "crates/toml/husky-toolchain-config-ast" }
# utls
husky-cargo-utils = { path = "crates/utils/husky-cargo-utils" }
husky-check-utils = { path = "crates/utils/husky-check-utils" }
husky-decl-macro-utils = { path = "crates/utils/husky-decl-macro-utils" }
husky-io-utils = { path = "crates/utils/husky-io-utils" }
husky-macro-utils = { path = "crates/utils/husky-macro-utils" }
husky-path-utils = { path = "crates/utils/husky-path-utils" }
husky-print-utils = { path = "crates/utils/husky-print-utils" }
husky-toml-utils = { path = "crates/utils/husky-toml-utils" }
husky-rng-utils = { path = "crates/utils/husky-rng-utils" }
husky-unicode-symbols = { path = "crates/utils/husky-unicode-symbols" }
# val
husky-val = { path = "crates/val/husky-val" }
husky-val-repr = { path = "crates/val/husky-val-repr" }
# vm
husky-standard-value = { path = "crates/vm/husky-standard-value" }
husky-standard-value-macros = { path = "crates/vm/husky-standard-value-macros" }
husky-vm = { path = "crates/vm/husky-vm" }
# library
husky-core = { path = "library/core" }
# registry
ad-hoc-task-dependency = { path = "registry/ad-hoc-task-dependency" }
malamute = { path = "registry/malamute-0.1.0" }
