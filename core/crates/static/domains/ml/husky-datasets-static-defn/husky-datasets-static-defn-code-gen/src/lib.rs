mod c_header;
mod c_source;

use husky_c_code_build::build_single_file_to_lib;
use husky_c_code_repr::*;
use std::fs::File;
use std::io::Write;

pub static NONPRIMITIVE_TYPES: &'static [&'static str] =
    &["BinaryImage28", "BinaryGrid28", "Dataset"];

//     "VirtualVec",
//     "VirtualCyclicSlice",
//     "VirtualStruct",
pub fn gen_ml_datasets_code(c_code_gen_dir: &str) {
    let c_header_path = format!("{}/husky_ml_datasets.h", c_code_gen_dir);
    let c_source_path = format!("{}/husky_ml_datasets.c", c_code_gen_dir);
    let husky_dir = std::env::var("HUSKY_DIR").expect("HUSKY_DIR is not set");
    let rust_path = format!(
        "{}/core/crates/vm/husky-vm-interface/src/__rust_code_gen__.rs",
        husky_dir
    );
    write_c_header(&c_header_path).unwrap();
    write_c_source(&c_source_path).unwrap();
    // write_rust_code(&rust_path).unwrap();
    build_single_file_to_lib(&c_code_gen_dir, "husky_ml_datasets");
}

pub fn write_c_header(c_header_path: &str) -> std::io::Result<()> {
    eprintln!("c_header_path: {}", c_header_path);
    let mut buffer = File::create(c_header_path).unwrap();
    write!(
        buffer,
        r#"// this is generated by husky_datasets_static_defn_code_gen::c_header::write_c_header
// do not modify by hand
        
#pragma once
"#
    )?;
    for ty in NONPRIMITIVE_TYPES {
        write!(buffer, "{}", CNonPrimitiveTypeRegistrationSource { ty })?
    }
    Ok(())
}

pub fn write_c_source(c_source_path: &str) -> std::io::Result<()> {
    use std::fmt::Display;

    let mut buffer = File::create(c_source_path).unwrap();
    write!(
        buffer,
        r#"#include "husky_ml_datasets.h"
"#
    );

    for ty in NONPRIMITIVE_TYPES {
        write!(buffer, "{}", CNonPrimitiveTypeRegistrationSource { ty })?
    }
    Ok(())
}
