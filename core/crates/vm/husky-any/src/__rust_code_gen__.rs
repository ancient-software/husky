// this is generated by husky_vm_interface_code_gen::rust_code::write_rust_code
// do not modify by hand

use crate::*;

type void = ();
type b32 = u32;
type b64 = u64;

// VirtualStruct
#[no_mangle]
pub unsafe extern "C" fn __virtual_struct_clone(data: *mut ()) -> *mut () {
    Box::<VirtualStruct>::into_raw(Box::new((*(data as *mut VirtualStruct)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_struct_drop(data: *mut ()) {
    Box::from_raw(data as *mut VirtualStruct);
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_struct_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const VirtualStruct) == *(other as *const () as *const VirtualStruct)
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_struct_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<VirtualStruct>() = registers[1].downcast_move()
}
extern "C" {
    pub static __VIRTUAL_STRUCT_VTABLE: __RegisterVTable;
}

// __VirtualEnum
#[no_mangle]
pub unsafe extern "C" fn __virtual_enum_clone(data: *mut ()) -> *mut () {
    Box::<__VirtualEnum>::into_raw(Box::new((*(data as *mut __VirtualEnum)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_enum_drop(data: *mut ()) {
    Box::from_raw(data as *mut __VirtualEnum);
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_enum_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const __VirtualEnum) == *(other as *const () as *const __VirtualEnum)
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_enum_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<__VirtualEnum>() = registers[1].downcast_move()
}
extern "C" {
    pub static __VIRTUAL_ENUM_VTABLE: __RegisterVTable;
}

// VirtualVec
#[no_mangle]
pub unsafe extern "C" fn __virtual_vec_clone(data: *mut ()) -> *mut () {
    Box::<VirtualVec>::into_raw(Box::new((*(data as *mut VirtualVec)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_vec_drop(data: *mut ()) {
    Box::from_raw(data as *mut VirtualVec);
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_vec_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const VirtualVec) == *(other as *const () as *const VirtualVec)
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_vec_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<VirtualVec>() = registers[1].downcast_move()
}
extern "C" {
    pub static __VIRTUAL_VEC_VTABLE: __RegisterVTable;
}

// VirtualCyclicSlice
#[no_mangle]
pub unsafe extern "C" fn __virtual_cyclic_slice_clone(data: *mut ()) -> *mut () {
    Box::<VirtualCyclicSlice>::into_raw(Box::new((*(data as *mut VirtualCyclicSlice)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_cyclic_slice_drop(data: *mut ()) {
    Box::from_raw(data as *mut VirtualCyclicSlice);
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_cyclic_slice_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const VirtualCyclicSlice) == *(other as *const () as *const VirtualCyclicSlice)
}
#[no_mangle]
pub unsafe extern "C" fn __virtual_cyclic_slice_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<VirtualCyclicSlice>() = registers[1].downcast_move()
}
extern "C" {
    pub static __VIRTUAL_CYCLIC_SLICE_VTABLE: __RegisterVTable;
}
