//! Generated by `sourcegen_lints`, do not edit by hand.

pub struct Lint {
    pub label: &'static str,
    pub description: &'static str,
}
pub struct LintGroup {
    pub lint: Lint,
    pub children: &'static [&'static str],
}
pub const DEFAULT_LINTS: &[Lint] = &[
    Lint {
        label: "absolute_paths_not_starting_with_crate",
        description: r##"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name"##,
    },
    Lint {
        label: "ambiguous_associated_items",
        description: r##"ambiguous associated items"##,
    },
    Lint {
        label: "anonymous_parameters",
        description: r##"detects anonymous parameters"##,
    },
    Lint {
        label: "arithmetic_overflow",
        description: r##"arithmetic operation overflows"##,
    },
    Lint {
        label: "array_into_iter",
        description: r##"detects calling `into_iter` on arrays in Rust 2015 and 2018"##,
    },
    Lint {
        label: "asm_sub_register",
        description: r##"using only a subset of a register for inline asm inputs"##,
    },
    Lint {
        label: "bad_asm_style",
        description: r##"incorrect use of inline assembly"##,
    },
    Lint {
        label: "bare_trait_objects",
        description: r##"suggest using `dyn Trait` for trait objects"##,
    },
    Lint {
        label: "bindings_with_variant_name",
        description: r##"detects pattern bindings with the same name as one of the matched variants"##,
    },
    Lint {
        label: "box_pointers",
        description: r##"use of owned (Box type) heap memory"##,
    },
    Lint {
        label: "break_with_label_and_loop",
        description: r##"`break` expression with label and unlabeled loop as value expression"##,
    },
    Lint {
        label: "cenum_impl_drop_cast",
        description: r##"a C-like enum implementing Drop is cast"##,
    },
    Lint {
        label: "clashing_extern_declarations",
        description: r##"detects when an extern fn has been declared with the same name but different types"##,
    },
    Lint {
        label: "coherence_leak_check",
        description: r##"distinct impls distinguished only by the leak-check code"##,
    },
    Lint {
        label: "conflicting_repr_hints",
        description: r##"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice"##,
    },
    Lint {
        label: "confusable_idents",
        description: r##"detects visually confusable pairs between identifiers"##,
    },
    Lint {
        label: "const_err",
        description: r##"constant evaluation encountered erroneous expression"##,
    },
    Lint {
        label: "const_evaluatable_unchecked",
        description: r##"detects a generic constant is used in a type without a emitting a warning"##,
    },
    Lint {
        label: "const_item_mutation",
        description: r##"detects attempts to mutate a `const` item"##,
    },
    Lint {
        label: "dead_code",
        description: r##"detect unused, unexported items"##,
    },
    Lint {
        label: "deprecated",
        description: r##"detects use of deprecated items"##,
    },
    Lint {
        label: "deprecated_in_future",
        description: r##"detects use of items that will be deprecated in a future version"##,
    },
    Lint {
        label: "deref_into_dyn_supertrait",
        description: r##"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future"##,
    },
    Lint {
        label: "deref_nullptr",
        description: r##"detects when an null pointer is dereferenced"##,
    },
    Lint {
        label: "drop_bounds",
        description: r##"bounds of the form `T: Drop` are most likely incorrect"##,
    },
    Lint {
        label: "dyn_drop",
        description: r##"trait objects of the form `dyn Drop` are useless"##,
    },
    Lint {
        label: "elided_lifetimes_in_paths",
        description: r##"hidden lifetime parameters in types are deprecated"##,
    },
    Lint {
        label: "ellipsis_inclusive_range_patterns",
        description: r##"`...` range patterns are deprecated"##,
    },
    Lint {
        label: "enum_intrinsics_non_enums",
        description: r##"detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types"##,
    },
    Lint {
        label: "explicit_outlives_requirements",
        description: r##"outlives requirements can be inferred"##,
    },
    Lint {
        label: "exported_private_dependencies",
        description: r##"public interface leaks type from a private dependency"##,
    },
    Lint {
        label: "forbidden_lint_groups",
        description: r##"applying forbid to lint-groups"##,
    },
    Lint {
        label: "function_item_references",
        description: r##"suggest casting to a function pointer when attempting to take references to function items"##,
    },
    Lint {
        label: "future_incompatible",
        description: r##"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait"##,
    },
    Lint {
        label: "ill_formed_attribute_input",
        description: r##"ill-formed attribute inputs that were previously accepted and used in practice"##,
    },
    Lint {
        label: "illegal_floating_point_literal_pattern",
        description: r##"floating-point literals cannot be used in patterns"##,
    },
    Lint {
        label: "improper_ctypes",
        description: r##"proper use of libc types in foreign modules"##,
    },
    Lint {
        label: "improper_ctypes_definitions",
        description: r##"proper use of libc types in foreign item definitions"##,
    },
    Lint {
        label: "incomplete_features",
        description: r##"incomplete features that may function improperly in some or all cases"##,
    },
    Lint {
        label: "incomplete_include",
        description: r##"trailing content in included file"##,
    },
    Lint {
        label: "indirect_structural_match",
        description: r##"constant used in pattern contains value of non-structural-match type in a field or a variant"##,
    },
    Lint {
        label: "ineffective_unstable_trait_impl",
        description: r##"detects `#[unstable]` on stable trait implementations for stable types"##,
    },
    Lint {
        label: "inline_no_sanitize",
        description: r##"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`"##,
    },
    Lint {
        label: "invalid_atomic_ordering",
        description: r##"usage of invalid atomic ordering in atomic operations and memory fences"##,
    },
    Lint {
        label: "invalid_doc_attributes",
        description: r##"detects invalid `#[doc(...)]` attributes"##,
    },
    Lint {
        label: "invalid_type_param_default",
        description: r##"type parameter default erroneously allowed in invalid location"##,
    },
    Lint {
        label: "invalid_value",
        description: r##"an invalid value is being created (such as a null reference)"##,
    },
    Lint {
        label: "irrefutable_let_patterns",
        description: r##"detects irrefutable patterns in `if let` and `while let` statements"##,
    },
    Lint {
        label: "keyword_idents",
        description: r##"detects edition keywords being used as an identifier"##,
    },
    Lint {
        label: "large_assignments",
        description: r##"detects large moves or copies"##,
    },
    Lint {
        label: "late_bound_lifetime_arguments",
        description: r##"detects generic lifetime arguments in path segments with late bound lifetime parameters"##,
    },
    Lint {
        label: "legacy_derive_helpers",
        description: r##"detects derive helper attributes that are used before they are introduced"##,
    },
    Lint {
        label: "macro_expanded_macro_exports_accessed_by_absolute_paths",
        description: r##"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths"##,
    },
    Lint {
        label: "macro_use_extern_crate",
        description: r##"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system"##,
    },
    Lint {
        label: "meta_variable_misuse",
        description: r##"possible meta-variable misuse at macro definition"##,
    },
    Lint {
        label: "missing_abi",
        description: r##"No declared ABI for extern declaration"##,
    },
    Lint {
        label: "missing_copy_implementations",
        description: r##"detects potentially-forgotten implementations of `Copy`"##,
    },
    Lint {
        label: "missing_debug_implementations",
        description: r##"detects missing implementations of Debug"##,
    },
    Lint {
        label: "missing_docs",
        description: r##"detects missing documentation for public members"##,
    },
    Lint {
        label: "missing_fragment_specifier",
        description: r##"detects missing fragment specifiers in unused `macro_rules!` patterns"##,
    },
    Lint {
        label: "mixed_script_confusables",
        description: r##"detects Unicode scripts whose mixed script confusables codepoints are solely used"##,
    },
    Lint {
        label: "must_not_suspend",
        description: r##"use of a `#[must_not_suspend]` value across a yield point"##,
    },
    Lint {
        label: "mutable_borrow_reservation_conflict",
        description: r##"reservation of a two-phased borrow conflicts with other shared borrows"##,
    },
    Lint {
        label: "mutable_transmutes",
        description: r##"mutating transmuted &mut T from &T may cause undefined behavior"##,
    },
    Lint {
        label: "named_asm_labels",
        description: r##"named labels in inline assembly"##,
    },
    Lint {
        label: "no_mangle_const_items",
        description: r##"const items will not have their symbols exported"##,
    },
    Lint {
        label: "no_mangle_generic_items",
        description: r##"generic items must be mangled"##,
    },
    Lint {
        label: "non_ascii_idents",
        description: r##"detects non-ASCII identifiers"##,
    },
    Lint {
        label: "non_camel_case_types",
        description: r##"types, variants, traits and type parameters should have camel case names"##,
    },
    Lint {
        label: "non_exhaustive_omitted_patterns",
        description: r##"detect when patterns of types marked `non_exhaustive` are missed"##,
    },
    Lint {
        label: "non_fmt_panics",
        description: r##"detect single-argument panic!() invocations in which the argument is not a format string"##,
    },
    Lint {
        label: "non_shorthand_field_patterns",
        description: r##"using `Struct { x: x }` instead of `Struct { x }` in a pattern"##,
    },
    Lint {
        label: "non_snake_case",
        description: r##"variables, methods, functions, lifetime parameters and modules should have snake case names"##,
    },
    Lint {
        label: "non_upper_case_globals",
        description: r##"static constants should have uppercase identifiers"##,
    },
    Lint {
        label: "nonstandard_style",
        description: r##"lint group for: non-camel-case-types, non-snake-case, non-upper-case-globals"##,
    },
    Lint {
        label: "nontrivial_structural_match",
        description: r##"constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types"##,
    },
    Lint {
        label: "noop_method_call",
        description: r##"detects the use of well-known noop methods"##,
    },
    Lint {
        label: "order_dependent_trait_objects",
        description: r##"trait-object types were treated as different depending on marker-trait order"##,
    },
    Lint {
        label: "overflowing_literals",
        description: r##"literal out of range for its type"##,
    },
    Lint {
        label: "overlapping_range_endpoints",
        description: r##"detects range patterns with overlapping endpoints"##,
    },
    Lint {
        label: "path_statements",
        description: r##"path statements with no effect"##,
    },
    Lint {
        label: "patterns_in_fns_without_body",
        description: r##"patterns in functions without body were erroneously allowed"##,
    },
    Lint {
        label: "pointer_structural_match",
        description: r##"pointers are not structural-match"##,
    },
    Lint {
        label: "private_in_public",
        description: r##"detect private items in public interfaces not caught by the old implementation"##,
    },
    Lint {
        label: "proc_macro_back_compat",
        description: r##"detects usage of old versions of certain proc-macro crates"##,
    },
    Lint {
        label: "proc_macro_derive_resolution_fallback",
        description: r##"detects proc macro derives using inaccessible names from parent modules"##,
    },
    Lint {
        label: "pub_use_of_private_extern_crate",
        description: r##"detect public re-exports of private extern crates"##,
    },
    Lint {
        label: "redundant_semicolons",
        description: r##"detects unnecessary trailing semicolons"##,
    },
    Lint {
        label: "renamed_and_removed_lints",
        description: r##"lints that have been renamed or removed"##,
    },
    Lint {
        label: "rust_2018_compatibility",
        description: r##"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate"##,
    },
    Lint {
        label: "rust_2018_idioms",
        description: r##"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements"##,
    },
    Lint {
        label: "rust_2021_compatibility",
        description: r##"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects, rust-2021-incompatible-closure-captures, rust-2021-incompatible-or-patterns, rust-2021-prelude-collisions, rust-2021-prefixes-incompatible-syntax, array-into-iter, non-fmt-panics"##,
    },
    Lint {
        label: "rust_2021_incompatible_closure_captures",
        description: r##"detects closures affected by Rust 2021 changes"##,
    },
    Lint {
        label: "rust_2021_incompatible_or_patterns",
        description: r##"detects usage of old versions of or-patterns"##,
    },
    Lint {
        label: "rust_2021_prefixes_incompatible_syntax",
        description: r##"identifiers that will be parsed as a prefix in Rust 2021"##,
    },
    Lint {
        label: "rust_2021_prelude_collisions",
        description: r##"detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions"##,
    },
    Lint {
        label: "semicolon_in_expressions_from_macros",
        description: r##"trailing semicolon in macro body used as expression"##,
    },
    Lint {
        label: "single_use_lifetimes",
        description: r##"detects lifetime parameters that are only used once"##,
    },
    Lint {
        label: "soft_unstable",
        description: r##"a feature gate that doesn't break dependent crates"##,
    },
    Lint {
        label: "stable_features",
        description: r##"stable features found in `#[feature]` directive"##,
    },
    Lint {
        label: "temporary_cstring_as_ptr",
        description: r##"detects getting the inner pointer of a temporary `CString`"##,
    },
    Lint {
        label: "text_direction_codepoint_in_comment",
        description: r##"invisible directionality-changing codepoints in comment"##,
    },
    Lint {
        label: "text_direction_codepoint_in_literal",
        description: r##"detect special Unicode codepoints that affect the visual representation of text on screen, changing the direction in which text flows"##,
    },
    Lint {
        label: "trivial_bounds",
        description: r##"these bounds don't depend on an type parameters"##,
    },
    Lint {
        label: "trivial_casts",
        description: r##"detects trivial casts which could be removed"##,
    },
    Lint {
        label: "trivial_numeric_casts",
        description: r##"detects trivial casts of numeric types which could be removed"##,
    },
    Lint {
        label: "type_alias_bounds",
        description: r##"bounds in type aliases are not enforced"##,
    },
    Lint {
        label: "tyvar_behind_raw_pointer",
        description: r##"raw pointer to an inference variable"##,
    },
    Lint {
        label: "unaligned_references",
        description: r##"detects unaligned references to fields of packed structs"##,
    },
    Lint {
        label: "uncommon_codepoints",
        description: r##"detects uncommon Unicode codepoints in identifiers"##,
    },
    Lint {
        label: "unconditional_panic",
        description: r##"operation will cause a panic at runtime"##,
    },
    Lint {
        label: "unconditional_recursion",
        description: r##"functions that cannot return without calling themselves"##,
    },
    Lint {
        label: "uninhabited_static",
        description: r##"uninhabited static"##,
    },
    Lint {
        label: "unknown_crate_types",
        description: r##"unknown crate type found in `#[crate_type]` directive"##,
    },
    Lint {
        label: "unknown_lints",
        description: r##"unrecognized lint attribute"##,
    },
    Lint {
        label: "unnameable_test_items",
        description: r##"detects an item that cannot be named being marked as `#[test_case]`"##,
    },
    Lint {
        label: "unreachable_code",
        description: r##"detects unreachable code paths"##,
    },
    Lint {
        label: "unreachable_patterns",
        description: r##"detects unreachable patterns"##,
    },
    Lint {
        label: "unreachable_pub",
        description: r##"`pub` items not reachable from crate root"##,
    },
    Lint {
        label: "unsafe_code",
        description: r##"usage of `unsafe` code"##,
    },
    Lint {
        label: "unsafe_op_in_unsafe_fn",
        description: r##"unsafe operations in unsafe functions without an explicit unsafe block are deprecated"##,
    },
    Lint {
        label: "unstable_features",
        description: r##"enabling unstable features (deprecated. do not use)"##,
    },
    Lint {
        label: "unstable_name_collisions",
        description: r##"detects name collision with an existing but unstable method"##,
    },
    Lint {
        label: "unsupported_calling_conventions",
        description: r##"use of unsupported calling convention"##,
    },
    Lint {
        label: "unsupported_naked_functions",
        description: r##"unsupported naked function definitions"##,
    },
    Lint {
        label: "unused",
        description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
    },
    Lint {
        label: "unused_allocation",
        description: r##"detects unnecessary allocations that can be eliminated"##,
    },
    Lint {
        label: "unused_assignments",
        description: r##"detect assignments that will never be read"##,
    },
    Lint {
        label: "unused_attributes",
        description: r##"detects attributes that were not used by the compiler"##,
    },
    Lint {
        label: "unused_braces",
        description: r##"unnecessary braces around an expression"##,
    },
    Lint {
        label: "unused_comparisons",
        description: r##"comparisons made useless by limits of the types involved"##,
    },
    Lint {
        label: "unused_crate_dependencies",
        description: r##"crate dependencies that are never used"##,
    },
    Lint {
        label: "unused_doc_comments",
        description: r##"detects doc comments that aren't used by rustdoc"##,
    },
    Lint {
        label: "unused_extern_crates",
        description: r##"extern crates that are never used"##,
    },
    Lint {
        label: "unused_features",
        description: r##"unused features found in crate-level `#[feature]` directives"##,
    },
    Lint {
        label: "unused_import_braces",
        description: r##"unnecessary braces around an imported item"##,
    },
    Lint {
        label: "unused_imports",
        description: r##"imports that are never used"##,
    },
    Lint {
        label: "unused_labels",
        description: r##"detects labels that are never used"##,
    },
    Lint {
        label: "unused_lifetimes",
        description: r##"detects lifetime parameters that are never used"##,
    },
    Lint {
        label: "unused_macros",
        description: r##"detects macros that were not used"##,
    },
    Lint {
        label: "unused_must_use",
        description: r##"unused result of a type flagged as `#[must_use]`"##,
    },
    Lint {
        label: "unused_mut",
        description: r##"detect mut variables which don't need to be mutable"##,
    },
    Lint {
        label: "unused_parens",
        description: r##"`if`, `match`, `while` and `return` do not need parentheses"##,
    },
    Lint {
        label: "unused_qualifications",
        description: r##"detects unnecessarily qualified names"##,
    },
    Lint {
        label: "unused_results",
        description: r##"unused result of an expression in a statement"##,
    },
    Lint {
        label: "unused_unsafe",
        description: r##"unnecessary use of an `unsafe` block"##,
    },
    Lint {
        label: "unused_variables",
        description: r##"detect variables which are not used in any way"##,
    },
    Lint {
        label: "useless_deprecated",
        description: r##"detects deprecation attributes with no effect"##,
    },
    Lint {
        label: "variant_size_differences",
        description: r##"detects enums with widely varying variant sizes"##,
    },
    Lint {
        label: "warnings",
        description: r##"mass-change the level for lints which produce warnings"##,
    },
    Lint {
        label: "warnings",
        description: r##"lint group for: all lints that are set to issue warnings"##,
    },
    Lint {
        label: "where_clauses_object_safety",
        description: r##"checks the object safety of where clauses"##,
    },
    Lint {
        label: "while_true",
        description: r##"suggest using `loop { }` instead of `while true { }`"##,
    },
];
pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[
    LintGroup {
        lint: Lint {
            label: "future_incompatible",
            description: r##"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait"##,
        },
        children: &[
            "forbidden_lint_groups",
            "illegal_floating_point_literal_pattern",
            "private_in_public",
            "pub_use_of_private_extern_crate",
            "invalid_type_param_default",
            "const_err",
            "unaligned_references",
            "patterns_in_fns_without_body",
            "missing_fragment_specifier",
            "late_bound_lifetime_arguments",
            "order_dependent_trait_objects",
            "coherence_leak_check",
            "unstable_name_collisions",
            "where_clauses_object_safety",
            "proc_macro_derive_resolution_fallback",
            "macro_expanded_macro_exports_accessed_by_absolute_paths",
            "ill_formed_attribute_input",
            "conflicting_repr_hints",
            "ambiguous_associated_items",
            "mutable_borrow_reservation_conflict",
            "indirect_structural_match",
            "pointer_structural_match",
            "nontrivial_structural_match",
            "soft_unstable",
            "cenum_impl_drop_cast",
            "const_evaluatable_unchecked",
            "uninhabited_static",
            "unsupported_naked_functions",
            "invalid_doc_attributes",
            "semicolon_in_expressions_from_macros",
            "legacy_derive_helpers",
            "proc_macro_back_compat",
            "unsupported_calling_conventions",
            "deref_into_dyn_supertrait",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "nonstandard_style",
            description: r##"lint group for: non-camel-case-types, non-snake-case, non-upper-case-globals"##,
        },
        children: &[
            "non_camel_case_types",
            "non_snake_case",
            "non_upper_case_globals",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "rust_2018_compatibility",
            description: r##"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate"##,
        },
        children: &[
            "keyword_idents",
            "anonymous_parameters",
            "tyvar_behind_raw_pointer",
            "absolute_paths_not_starting_with_crate",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "rust_2018_idioms",
            description: r##"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements"##,
        },
        children: &[
            "bare_trait_objects",
            "unused_extern_crates",
            "ellipsis_inclusive_range_patterns",
            "elided_lifetimes_in_paths",
            "explicit_outlives_requirements",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "rust_2021_compatibility",
            description: r##"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects, rust-2021-incompatible-closure-captures, rust-2021-incompatible-or-patterns, rust-2021-prelude-collisions, rust-2021-prefixes-incompatible-syntax, array-into-iter, non-fmt-panics"##,
        },
        children: &[
            "ellipsis_inclusive_range_patterns",
            "bare_trait_objects",
            "rust_2021_incompatible_closure_captures",
            "rust_2021_incompatible_or_patterns",
            "rust_2021_prelude_collisions",
            "rust_2021_prefixes_incompatible_syntax",
            "array_into_iter",
            "non_fmt_panics",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "unused",
            description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
        },
        children: &[
            "unused_imports",
            "unused_variables",
            "unused_assignments",
            "dead_code",
            "unused_mut",
            "unreachable_code",
            "unreachable_patterns",
            "unused_must_use",
            "unused_unsafe",
            "path_statements",
            "unused_attributes",
            "unused_macros",
            "unused_allocation",
            "unused_doc_comments",
            "unused_extern_crates",
            "unused_features",
            "unused_labels",
            "unused_parens",
            "unused_braces",
            "redundant_semicolons",
        ],
    },
    LintGroup {
        lint: Lint {
            label: "warnings",
            description: r##"lint group for: all lints that are set to issue warnings"##,
        },
        children: &[],
    },
];

pub const RUSTDOC_LINTS: &[Lint] = &[
    Lint {
        label: "rustdoc::all",
        description: r##"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-crate-level-docs"##,
    },
    Lint {
        label: "rustdoc::bare_urls",
        description: r##"detects URLs that are not hyperlinks"##,
    },
    Lint {
        label: "rustdoc::broken_intra_doc_links",
        description: r##"failures in resolving intra-doc link targets"##,
    },
    Lint {
        label: "rustdoc::invalid_codeblock_attributes",
        description: r##"codeblock attribute looks a lot like a known one"##,
    },
    Lint {
        label: "rustdoc::invalid_html_tags",
        description: r##"detects invalid HTML tags in doc comments"##,
    },
    Lint {
        label: "rustdoc::invalid_rust_codeblocks",
        description: r##"codeblock could not be parsed as valid Rust or is empty"##,
    },
    Lint {
        label: "rustdoc::missing_crate_level_docs",
        description: r##"detects crates with no crate-level documentation"##,
    },
    Lint {
        label: "rustdoc::missing_doc_code_examples",
        description: r##"detects publicly-exported items without code samples in their documentation"##,
    },
    Lint {
        label: "rustdoc::private_doc_tests",
        description: r##"detects code samples in docs of private items not documented by rustdoc"##,
    },
    Lint {
        label: "rustdoc::private_intra_doc_links",
        description: r##"linking from a public item to a private one"##,
    },
];
pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[LintGroup {
    lint: Lint {
        label: "rustdoc::all",
        description: r##"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-crate-level-docs"##,
    },
    children: &[
        "rustdoc::broken_intra_doc_links",
        "rustdoc::private_intra_doc_links",
        "rustdoc::missing_doc_code_examples",
        "rustdoc::private_doc_tests",
        "rustdoc::invalid_codeblock_attributes",
        "rustdoc::invalid_rust_codeblocks",
        "rustdoc::invalid_html_tags",
        "rustdoc::bare_urls",
        "rustdoc::missing_crate_level_docs",
    ],
}];

pub const FEATURES: &[Lint] = &[];
