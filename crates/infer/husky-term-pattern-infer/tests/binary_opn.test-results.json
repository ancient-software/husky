[
  {
    "input": "0 + 0",
    "output": "raw_expr_arena = Arena {\n    data: [\n        Expr {\n            variant: Atom(\n                Literal(\n                    Integer(\n                        0,\n                    ),\n                ),\n            ),\n            range: [1:1, 1:2),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Atom(\n                Literal(\n                    Integer(\n                        0,\n                    ),\n                ),\n            ),\n            range: [1:5, 1:6),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Opn {\n                opn_variant: Binary(\n                    PureClosed(\n                        Add,\n                    ),\n                ),\n                opds: 0..2,\n            },\n            range: [1:1, 1:6),\n            base_scope_result: None,\n        },\n    ],\n};\n\nty_infer_sheet = TermPatternInferSheet {\n    term_patt_itr: TermPatternInterner {\n        patterns: [],\n        unresolved_registry: UnresolvedTermRegistry {\n            terms: [\n                IntegerLiteral(0),\n                IntegerType(UnresolvedTermIdx(0)),\n                IntegerLiteral(1),\n                IntegerType(UnresolvedTermIdx(2)),\n            ],\n        },\n    },\n    var_results: {},\n    expr_results: ArenaMap {\n        data: [\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Unresolved(\n                                    UnresolvedTermIdx(\n                                        0,\n                                    ),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                1,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Unresolved(\n                                    UnresolvedTermIdx(\n                                        2,\n                                    ),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                3,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        None,\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                1,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n        ],\n    },\n};"
  },
  {
    "input": "0i32 + 0",
    "output": "raw_expr_arena = Arena {\n    data: [\n        Expr {\n            variant: Atom(\n                Literal(\n                    I32(\n                        0,\n                    ),\n                ),\n            ),\n            range: [1:1, 1:5),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Atom(\n                Literal(\n                    Integer(\n                        0,\n                    ),\n                ),\n            ),\n            range: [1:8, 1:9),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Opn {\n                opn_variant: Binary(\n                    PureClosed(\n                        Add,\n                    ),\n                ),\n                opds: 0..2,\n            },\n            range: [1:1, 1:9),\n            base_scope_result: None,\n        },\n    ],\n};\n\nty_infer_sheet = TermPatternInferSheet {\n    term_patt_itr: TermPatternInterner {\n        patterns: [],\n        unresolved_registry: UnresolvedTermRegistry {\n            terms: [\n                IntegerLiteral(1),\n                IntegerType(UnresolvedTermIdx(0)),\n            ],\n        },\n    },\n    var_results: {},\n    expr_results: ArenaMap {\n        data: [\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Resolved(\n                                    Atom(Literal(I32(0))),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Resolved(\n                            Atom(Entity { path: `i32` }),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Unresolved(\n                                    UnresolvedTermIdx(\n                                        0,\n                                    ),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                1,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        None,\n                    ),\n                    ty: Ok(\n                        Resolved(\n                            Atom(Entity { path: `i32` }),\n                        ),\n                    ),\n                },\n            ),\n        ],\n    },\n};"
  },
  {
    "input": "0. + 0",
    "output": "raw_expr_arena = Arena {\n    data: [\n        Expr {\n            variant: Atom(\n                Literal(\n                    Float(\n                        OrderedFloat(\n                            0.0,\n                        ),\n                    ),\n                ),\n            ),\n            range: [1:1, 1:3),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Atom(\n                Literal(\n                    Integer(\n                        0,\n                    ),\n                ),\n            ),\n            range: [1:6, 1:7),\n            base_scope_result: None,\n        },\n        Expr {\n            variant: Opn {\n                opn_variant: Binary(\n                    PureClosed(\n                        Add,\n                    ),\n                ),\n                opds: 0..2,\n            },\n            range: [1:1, 1:7),\n            base_scope_result: None,\n        },\n    ],\n};\n\nty_infer_sheet = TermPatternInferSheet {\n    term_patt_itr: TermPatternInterner {\n        patterns: [],\n        unresolved_registry: UnresolvedTermRegistry {\n            terms: [\n                FloatLiteral(\n                    0,\n                ),\n                FloatType(\n                    UnresolvedTermIdx(\n                        0,\n                    ),\n                ),\n                IntegerLiteral(1),\n                IntegerType(UnresolvedTermIdx(2)),\n            ],\n        },\n    },\n    var_results: {},\n    expr_results: ArenaMap {\n        data: [\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Unresolved(\n                                    UnresolvedTermIdx(\n                                        0,\n                                    ),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                1,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        Some(\n                            ConstExprPatternItd {\n                                term: Unresolved(\n                                    UnresolvedTermIdx(\n                                        2,\n                                    ),\n                                ),\n                                opt_substitution_ctx_idx: None,\n                            },\n                        ),\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                3,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n            Some(\n                ExprTermPatternInferResults {\n                    const_expr: Ok(\n                        None,\n                    ),\n                    ty: Ok(\n                        Unresolved(\n                            UnresolvedTermIdx(\n                                1,\n                            ),\n                        ),\n                    ),\n                },\n            ),\n        ],\n    },\n};"
  }
]