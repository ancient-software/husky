[
  {
    "input": "1",
    "output": "raw expr arena:\n    Arena ([\n      #0: RawExpr {\n        variant: Atom(\n            Literal(\n                Integer(\n                    1,\n                ),\n            ),\n        ),\n        range: [1:1, 1:2),\n        base_scope_result: None,\n    }\n    ])\nty infer sheet:\n    TermPatternInferSheet {\n        term_pattern_interner: TermPatternInterner {\n            patterns: [],\n            unresolved_registry: UnresolvedTermRegistry {\n                terms: [\n                    IntegerLiteral(0),\n                    IntegerType(UnresolvedTermIdx(0)),\n                ],\n            },\n        },\n        expr_results: ArenaMap ([\n            0, ExprTermPatternInferEntry {\n            const_expr: Ok(\n                Some(\n                    ConstExprPatternItd {\n                        term: Unresolved(\n                            UnresolvedTermIdx(\n                                0,\n                            ),\n                        ),\n                        opt_substitution_ctx_idx: None,\n                    },\n                ),\n            ),\n            ty: Ok(\n                Unresolved(\n                    UnresolvedTermIdx(\n                        1,\n                    ),\n                ),\n            ),\n        }\n        ]),\n    }"
  },
  {
    "input": "1i32",
    "output": "raw expr arena:\n    Arena ([\n      #0: RawExpr {\n        variant: Atom(\n            Literal(\n                I32(\n                    1,\n                ),\n            ),\n        ),\n        range: [1:1, 1:5),\n        base_scope_result: None,\n    }\n    ])\nty infer sheet:\n    TermPatternInferSheet {\n        term_pattern_interner: TermPatternInterner {\n            patterns: [],\n            unresolved_registry: UnresolvedTermRegistry {\n                terms: [],\n            },\n        },\n        expr_results: ArenaMap ([\n            0, ExprTermPatternInferEntry {\n            const_expr: Ok(\n                Some(\n                    ConstExprPatternItd {\n                        term: Resolved(\n                            Atom(Literal(I32(1))),\n                        ),\n                        opt_substitution_ctx_idx: None,\n                    },\n                ),\n            ),\n            ty: Ok(\n                Resolved(\n                    Atom(Entity { path: `i32` }),\n                ),\n            ),\n        }\n        ]),\n    }"
  },
  {
    "input": "1i64",
    "output": "raw expr arena:\n    Arena ([\n      #0: RawExpr {\n        variant: Atom(\n            Literal(\n                I64(\n                    1,\n                ),\n            ),\n        ),\n        range: [1:1, 1:5),\n        base_scope_result: None,\n    }\n    ])\nty infer sheet:\n    TermPatternInferSheet {\n        term_pattern_interner: TermPatternInterner {\n            patterns: [],\n            unresolved_registry: UnresolvedTermRegistry {\n                terms: [],\n            },\n        },\n        expr_results: ArenaMap ([\n            0, ExprTermPatternInferEntry {\n            const_expr: Ok(\n                Some(\n                    ConstExprPatternItd {\n                        term: Resolved(\n                            Atom(Literal(I64(1))),\n                        ),\n                        opt_substitution_ctx_idx: None,\n                    },\n                ),\n            ),\n            ty: Ok(\n                Resolved(\n                    Atom(Entity { path: `i32` }),\n                ),\n            ),\n        }\n        ]),\n    }"
  },
  {
    "input": "1.",
    "output": "raw expr arena:\n    Arena ([\n      #0: RawExpr {\n        variant: Atom(\n            Literal(\n                Float(\n                    OrderedFloat(\n                        1.0,\n                    ),\n                ),\n            ),\n        ),\n        range: [1:1, 1:3),\n        base_scope_result: None,\n    }\n    ])\nty infer sheet:\n    TermPatternInferSheet {\n        term_pattern_interner: TermPatternInterner {\n            patterns: [],\n            unresolved_registry: UnresolvedTermRegistry {\n                terms: [\n                    FloatLiteral(\n                        0,\n                    ),\n                    FloatType(\n                        UnresolvedTermIdx(\n                            0,\n                        ),\n                    ),\n                ],\n            },\n        },\n        expr_results: ArenaMap ([\n            0, ExprTermPatternInferEntry {\n            const_expr: Ok(\n                Some(\n                    ConstExprPatternItd {\n                        term: Unresolved(\n                            UnresolvedTermIdx(\n                                0,\n                            ),\n                        ),\n                        opt_substitution_ctx_idx: None,\n                    },\n                ),\n            ),\n            ty: Ok(\n                Unresolved(\n                    UnresolvedTermIdx(\n                        1,\n                    ),\n                ),\n            ),\n        }\n        ]),\n    }"
  }
]