//! As we expect Lean in our projects to be autogenerated by visored, we group defns into arena for convenience
pub mod def;
pub mod variable;

use crate::*;
use idx_arena::{Arena, ArenaIdx, ArenaIdxRange, ArenaRef};
use lean_coword::ident::LnIdent;
use lean_term::ty::LnType;

pub enum LnItemDefnData {
    Variable {
        symbol: LnIdent,
        ty: LnType,
    },
    Group {
        defns: LnItemDefnIdxRange,
        meta: LnHirItemDefnGroupMeta,
    },
}
impl LnItemDefnData {
    pub(crate) fn children(&self) -> Vec<LnItemDefnIdx> {
        match self {
            LnItemDefnData::Variable { .. } => vec![],
            LnItemDefnData::Group { defns, .. } => defns.into_iter().collect(),
        }
    }
}

pub enum LnHirItemDefnGroupMeta {
    Paragraph,
    Sentence,
}

pub type LnItemDefnArena = Arena<LnItemDefnData>;
pub type LnItemDefnArenaRef<'a> = ArenaRef<'a, LnItemDefnData>;
pub type LnItemDefnIdx = ArenaIdx<LnItemDefnData>;
pub type LnItemDefnIdxRange = ArenaIdxRange<LnItemDefnData>;

impl std::fmt::Display for LnHirItemDefnGroupMeta {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            LnHirItemDefnGroupMeta::Paragraph => write!(f, "paragraph"),
            LnHirItemDefnGroupMeta::Sentence => write!(f, "sentence"),
        }
    }
}
