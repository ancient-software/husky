[
  {
    "input": "+",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Closed(\n                        BinaryClosedOpr::Add,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "-",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Minus,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "*",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Star,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "/",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Closed(\n                        BinaryClosedOpr::Div,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "**",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Closed(\n                        BinaryClosedOpr::Power,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "|",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Vertical,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "||",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::DoubleVertical,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "&&",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::ShortCircuitLogic(\n                        BinaryShortcuitLogicOpr::And,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "==",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Comparison(\n                        BinaryComparisonOpr::Eq,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "!=",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Comparison(\n                        BinaryComparisonOpr::Neq,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": ">",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::RaOrGt,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": ">=",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Comparison(\n                        BinaryComparisonOpr::Geq,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "<",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::LaOrLt,\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "<=",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Punctuation(\n            Punctuation(\n                PunctuationMapped::Binary(\n                    SynBinaryOpr::Comparison(\n                        BinaryComparisonOpr::Leq,\n                    ),\n                ),\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  }
]