[
  {
    "input": "\"haha\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"haha\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "\"\\n\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"\\n\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "\"\\t\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"\\t\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "\"\\\\\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"\\\\\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "\"\\\"\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"\\\"\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  },
  {
    "input": "\"\\r\"",
    "output": "TokenSheetData {\n    tokens: [\n        TokenData::Literal(\n            LiteralTokenData::String(\n                StringLiteralTokenData {\n                    data: \"\\r\",\n                },\n            ),\n        ),\n    ],\n    token_verses: TokenVerses {\n        main_sequence: MainTokenVerseSequence {\n            verses_data: [\n                TokenVerseData {\n                    start: TokenVerseStart(\n                        TokenIdx(\n                            1,\n                        ),\n                    ),\n                    indent: 0,\n                },\n            ],\n        },\n        nested_sequences: [],\n    },\n}"
  }
]