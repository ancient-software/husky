HollowTerms {
    entries: [
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    15,
                ),
                hole_kind: UnspecifiedIntegerType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`usize`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`usize`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`usize`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    24,
                ),
                hole_kind: UnspecifiedIntegerType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`usize`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`usize`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`usize`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    32,
                ),
                hole_kind: ImplicitType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`MnistLabel`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`MnistLabel`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`MnistLabel`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    32,
                ),
                hole_kind: Any,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`Zero`),
                        ),
                    },
                ),
                constraints: [],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::TypeOntology {
                path: TypePath(`malamute::OneVsAll`, `Enum`),
                refined_path: Right(
                    CustomTypePath(
                        TypePath(`malamute::OneVsAll`, `Enum`),
                    ),
                ),
                arguments: [
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                2,
                            ),
                        ),
                    },
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                3,
                            ),
                        ),
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`OneVsAll MnistLabel Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    37,
                ),
                hole_kind: ImplicitType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`MnistLabel`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`MnistLabel`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`MnistLabel`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    37,
                ),
                hole_kind: Any,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`Zero`),
                        ),
                    },
                ),
                constraints: [],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::TypeOntology {
                path: TypePath(`malamute::OneVsAllResult`, `Enum`),
                refined_path: Right(
                    CustomTypePath(
                        TypePath(`malamute::OneVsAllResult`, `Enum`),
                    ),
                ),
                arguments: [
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                5,
                            ),
                        ),
                    },
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                6,
                            ),
                        ),
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`OneVsAllResult MnistLabel Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Ritchie {
                ritchie_kind: Type(
                    Gn,
                ),
                params: [
                    FluffyRitchieParameter::Variadic(
                        FluffyRitchieVariadicParameter {
                            contract: Pure,
                            ty: FluffyTerm {
                                place: None,
                                base: FluffyTermBase::Ethereal(
                                    EtherealTerm(`f32`),
                                ),
                            },
                        },
                    ),
                    FluffyRitchieParameter::Keyed(
                        FluffyRitchieKeyedParameter {
                            key: `skip`,
                            contract: Pure,
                            ty: FluffyTerm {
                                place: None,
                                base: FluffyTermBase::Ethereal(
                                    EtherealTerm(`i32`),
                                ),
                            },
                            has_default: true,
                        },
                    ),
                ],
                return_ty: FluffyTerm {
                    place: None,
                    base: FluffyTermBase::Hollow(
                        HollowTerm(
                            7,
                        ),
                    ),
                },
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`gn((f32, i32) -> OneVsAllResult MnistLabel Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    54,
                ),
                hole_kind: UnspecifiedIntegerType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`usize`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`usize`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`usize`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    60,
                ),
                hole_kind: UnspecifiedIntegerType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`usize`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`usize`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`usize`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    66,
                ),
                hole_kind: UnspecifiedIntegerType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`usize`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`usize`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`usize`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    92,
                ),
                hole_kind: ImplicitType,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`MnistLabel`),
                        ),
                    },
                ),
                constraints: [
                    HoleConstraint::CoercibleInto {
                        target: FluffyTerm {
                            place: None,
                            base: FluffyTermBase::Ethereal(
                                EtherealTerm(`MnistLabel`),
                            ),
                        },
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`MnistLabel`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::Hole {
                hole_source: HoleSource::Expr(
                    92,
                ),
                hole_kind: Any,
                fill: Some(
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Ethereal(
                            EtherealTerm(`Zero`),
                        ),
                    },
                ),
                constraints: [],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`Zero`),
            ),
        },
        HollowTermEntry {
            data: HollowTermData::TypeOntology {
                path: TypePath(`malamute::OneVsAll`, `Enum`),
                refined_path: Right(
                    CustomTypePath(
                        TypePath(`malamute::OneVsAll`, `Enum`),
                    ),
                ),
                arguments: [
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                12,
                            ),
                        ),
                    },
                    FluffyTerm {
                        place: None,
                        base: FluffyTermBase::Hollow(
                            HollowTerm(
                                13,
                            ),
                        ),
                    },
                ],
            },
            resolve_progress: HollowTermResolveProgressBuf::ResolvedEthereal(
                EtherealTerm(`OneVsAll MnistLabel Zero`),
            ),
        },
    ],
    first_unresolved_term_idx: 14,
}