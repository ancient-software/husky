// this is generated by husky_vm_interface_code_gen::rust_code::write_rust_code
// do not modify by hand

use crate::*;

type void = ();
type b32 = u32;
type b64 = u64;

use crate::cv::mnist::*;

// MnistLabel
#[no_mangle]
pub unsafe extern "C" fn __mnist_label_clone(data: *mut ()) -> *mut () {
    Box::<MnistLabel>::into_raw(Box::new((*(data as *mut MnistLabel)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __mnist_label_drop(data: *mut ()) {
    Box::from_raw(data as *mut MnistLabel);
}
#[no_mangle]
pub unsafe extern "C" fn __mnist_label_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const MnistLabel) == *(other as *const () as *const MnistLabel)
}
#[no_mangle]
pub unsafe extern "C" fn __mnist_label_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<MnistLabel>(&__MNIST_LABEL_VTABLE) = registers[1].downcast_move(&__MNIST_LABEL_VTABLE)
}
#[no_mangle]
pub static __MNIST_LABEL_VTABLE: __RegisterTyVTable = __RegisterTyVTable {
    primitive_value_to_bool: None,
    primitive_value_to_box: None,
    clone: __mnist_label_clone,
    drop: __mnist_label_drop,
    eq: __mnist_label_eq,
    assign: __mnist_label_assign,
    typename_str_hash_u64: 16552472197362797834,
    typename_str: "MnistLabel",
};

// BinaryImage28
#[no_mangle]
pub unsafe extern "C" fn __binary_image_28_clone(data: *mut ()) -> *mut () {
    Box::<BinaryImage28>::into_raw(Box::new((*(data as *mut BinaryImage28)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __binary_image_28_drop(data: *mut ()) {
    Box::from_raw(data as *mut BinaryImage28);
}
#[no_mangle]
pub unsafe extern "C" fn __binary_image_28_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const BinaryImage28) == *(other as *const () as *const BinaryImage28)
}
#[no_mangle]
pub unsafe extern "C" fn __binary_image_28_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<BinaryImage28>(&__BINARY_IMAGE_28_VTABLE) = registers[1].downcast_move(&__BINARY_IMAGE_28_VTABLE)
}
#[no_mangle]
pub static __BINARY_IMAGE_28_VTABLE: __RegisterTyVTable = __RegisterTyVTable {
    primitive_value_to_bool: None,
    primitive_value_to_box: None,
    clone: __binary_image_28_clone,
    drop: __binary_image_28_drop,
    eq: __binary_image_28_eq,
    assign: __binary_image_28_assign,
    typename_str_hash_u64: 266812593373922541,
    typename_str: "BinaryImage28",
};

// BinaryGrid28
#[no_mangle]
pub unsafe extern "C" fn __binary_grid_28_clone(data: *mut ()) -> *mut () {
    Box::<BinaryGrid28>::into_raw(Box::new((*(data as *mut BinaryGrid28)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __binary_grid_28_drop(data: *mut ()) {
    Box::from_raw(data as *mut BinaryGrid28);
}
#[no_mangle]
pub unsafe extern "C" fn __binary_grid_28_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const BinaryGrid28) == *(other as *const () as *const BinaryGrid28)
}
#[no_mangle]
pub unsafe extern "C" fn __binary_grid_28_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<BinaryGrid28>(&__BINARY_GRID_28_VTABLE) = registers[1].downcast_move(&__BINARY_GRID_28_VTABLE)
}
#[no_mangle]
pub static __BINARY_GRID_28_VTABLE: __RegisterTyVTable = __RegisterTyVTable {
    primitive_value_to_bool: None,
    primitive_value_to_box: None,
    clone: __binary_grid_28_clone,
    drop: __binary_grid_28_drop,
    eq: __binary_grid_28_eq,
    assign: __binary_grid_28_assign,
    typename_str_hash_u64: 5289051695346958525,
    typename_str: "BinaryGrid28",
};

// Dataset
#[no_mangle]
pub unsafe extern "C" fn __dataset_clone(data: *mut ()) -> *mut () {
    Box::<Dataset>::into_raw(Box::new((*(data as *mut Dataset)).clone())) as *mut ()
}
#[no_mangle]
pub unsafe extern "C" fn __dataset_drop(data: *mut ()) {
    Box::from_raw(data as *mut Dataset);
}
#[no_mangle]
pub unsafe extern "C" fn __dataset_eq(this: &(), other: &()) -> bool {
    *(this as *const () as *const Dataset) == *(other as *const () as *const Dataset)
}
#[no_mangle]
pub unsafe extern "C" fn __dataset_assign(registers: *mut __Register) {
    let registers = std::slice::from_raw_parts_mut(registers, 2);
    *registers[0].downcast_temp_mut::<Dataset>(&__DATASET_VTABLE) = registers[1].downcast_move(&__DATASET_VTABLE)
}
#[no_mangle]
pub static __DATASET_VTABLE: __RegisterTyVTable = __RegisterTyVTable {
    primitive_value_to_bool: None,
    primitive_value_to_box: None,
    clone: __dataset_clone,
    drop: __dataset_drop,
    eq: __dataset_eq,
    assign: __dataset_assign,
    typename_str_hash_u64: 8010506253231886660,
    typename_str: "Dataset",
};
