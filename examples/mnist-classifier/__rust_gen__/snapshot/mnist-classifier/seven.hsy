use domains::ml::datasets::cv::mnist::MnistLabel
use crate::major::major_concave_components
use crate::major::major_connected_component
use domains::ml::models::narrow::narrow_down
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*

use crate::one::is_one
use crate::six::is_six
use crate::zero::is_zero
use crate::three::is_three

func special_seven_match -> FermiMatchResult:
    fermi_match(major_concave_components,[leftupcc_pattern])

func leftupcc_pattern(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y < 0.0

    require cc.relative_bounding_box.ymax() > 0.3

    ang = cc.start_tangent().angle(true)
    require ang < 30.0
    ang 



def is_seven -> ?MnistLabel:
    require is_one be none
    require is_six be none
    require is_zero be none

    if major_concave_components.ilen() == 1:

        require major_connected_component.max_hole_ilen == 0.

        upper_excess = major_connected_component.upper_mass - major_connected_component.lower_mass

        require upper_excess > 10.
        MnistLabel::Seven
    else:
        // require is_three be none
        require special_seven_match.matches[0] be some
    
    MnistLabel::Seven
