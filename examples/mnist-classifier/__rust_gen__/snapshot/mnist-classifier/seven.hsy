use domains::ml::datasets::cv::mnist::MnistLabel
use crate::major::major_concave_components
use crate::major::major_connected_component
use domains::ml::models::narrow::narrow_down
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*

use crate::one::is_one
use crate::six::is_six
use crate::zero::is_zero
use crate::three::is_three

func simple_seven_match -> FermiMatchResult:
    fermi_match(major_concave_components,[simple_leftdown_pattern])

func simple_leftdown_pattern(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y < 0.0
    -dp.y

func special_seven_match -> FermiMatchResult:
    fermi_match(major_concave_components,[leftupcc_pattern, leftdowncc_pattern])

func leftupcc_pattern(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y < 0.0
    require cc.relative_bounding_box.ymax() > 0.6
    cc.end().y

func leftdowncc_pattern(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y < 0.0

    require cc.relative_bounding_box.ymin() < 0.3

    ang = cc.start_tangent().angle(true)
    require ang < 30.0
    ang

def is_seven -> ?MnistLabel:
    require is_one be none
    require is_six be none
    require is_zero be none
    require major_connected_component.max_hole_ilen == 0.
    simple_match_norm = simple_seven_match.norm
    if simple_match_norm < 1.0:
        require simple_seven_match.matches[0] be some
        upper_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
        if upper_excess < 10.:
            end_tangent = simple_seven_match.matches[0].end_tangent()
            a = end_tangent.y
            require a < -7.0
        MnistLabel::Seven
    if simple_match_norm < 4.0:

        upper_excess = major_connected_component.upper_mass - major_connected_component.lower_mass

        require upper_excess > 10.
        MnistLabel::Seven
    require special_seven_match.matches[0] be some
    others = special_seven_match.others
    require false
    MnistLabel::Seven
