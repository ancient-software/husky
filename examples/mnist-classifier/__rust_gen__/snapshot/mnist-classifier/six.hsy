use domains::ml::datasets::cv::mnist::MnistLabel
use domains::ml::models::normalize::normalize_vmax_f32
use domains::ml::models::boosting::boosting_with_vmax_normalized
use domains::ml::models::narrow::narrow_down
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*
use crate::one::is_one

func six_match -> FermiMatchResult:
    fermi_match(major_concave_components, [upmost])

func six_match_refined1 -> FermiMatchResult:
    fermi_match(major_concave_components, [upmost, right_bottom])

def is_six -> ?MnistLabel:
    require is_one be none
    require six_match.matches[0] be some
    if major_connected_component.raw_contours.ilen() == 1:
        narrow_down(
            MnistLabel::Six,
            5,
            six_match.norm,
            six_match_refined1.rel_norm
        )?
        if six_match_refined1.norm > 0.0:
            MnistLabel::Six
        MnistLabel::Six
    narrow_down(
        MnistLabel::Six,
        5,
        six_match.norm
    )?
    require six_match.matches[0].angle_change < -100.0
    MnistLabel::Six

func upmost(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y > 0.0
    dp.y

func right_bottom(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y > 0.0
    -cc.end().y
