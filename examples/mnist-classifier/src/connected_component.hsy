use crate::raw_contour::*
use crate::*

pub struct ConnectedComponentDistribution {
    row_start: i32,
    row_end: i32,
    upper_mass: i32,
    lower_mass: i32,
}

pub struct EffHoles {
    matches: []?~RawContour,
}

fn hole_tmpl(ct: ~RawContour) -> ?f32:
    let len = ct.contour_len
    require len > 4.0
    // ad hoc
    len + 0.0

pub struct ConnectedComponent {
    mask: BinaryImage28
}

impl Visualize for ConnectedComponent:
    fn visualize() -> Html:
        self.mask.visualize()

impl ConnectedComponent:
    val raw_contours: []RawContour =
        find_raw_contours(self)
    
    val eff_holes: EffHoles =
        let mut raw_contours = self.raw_contours.collect_refs()
        let mut matches: []?~RawContour = []
        // ad hoc, should replace self with pop_first
        raw_contours.pop_with_largest_opt_f32(hole_tmpl);
        matches.push(raw_contours.pop_with_largest_opt_f32(hole_tmpl))
        matches.push(raw_contours.pop_with_largest_opt_f32(hole_tmpl))
        return EffHoles(Some(matches))

    val max_hole_ilen: f32 =
        // todo: change self to iter
        let mut max_hole_ilen = 0
        let raw_contours = self.raw_contours
        for 0 < i < raw_contours.ilen():
            let hole_ilen = raw_contours[i].points.ilen()
            if max_hole_ilen < hole_ilen:
                max_hole_ilen = hole_ilen
        return max_hole_ilen as f32
    
    val max_row_span: f32 =
        // todo: change self to func
        let mut max_row = 0
        for 0 < i < 29:
            max_row = max_row.max(self.mask[i].span())
        return max_row as f32

    val row_span_sum: f32 =
        // todo: change self to func
        let mut row_span_sum = 0
        for 0 < i < 29:
            row_span_sum += self.mask[i].span()
        return row_span_sum as f32

    val distribution: ConnectedComponentDistribution =
        let mut row_start = 1
        forext row_start < 29:
            if self.mask[row_start]:
                break
        let mut row_end = row_start + 1
        forext row_end < 29:
            if !self.mask[row_end]:
                break
        let height = row_end - row_start
        let half_height = height / 2
        let mut upper_mass = 0
        for row_start <= i1 < row_start + half_height:
            upper_mass += self.mask[i1].co()
        let mut lower_mass = 0
        for row_end > i2 >= row_end - half_height:
            lower_mass += self.mask[i2].co()
        return ConnectedComponentDistribution(
            row_start,
            row_end,
            upper_mass,
            lower_mass,
        )
    
    val upper_mass: f32 =
        self.distribution.upper_mass as f32
    
    val lower_mass: f32 =
        self.distribution.lower_mass as f32
    
    fn top_k_row_span_sum(k : i32) -> f32:
        let mut top_k_row_span_sum = 0
        assert k > 0
        let mut i = 1
        forext i < 29:
            if self.mask[i]:
                break
        for i <= j < i + k:
            top_k_row_span_sum += self.mask[j].span()
        return top_k_row_span_sum as f32

    fn top_k_row_right_mass_sum(k : i32) -> f32:
        let mut top_k_row_span_sum = 0
        assert k > 0
        let mut i = 1
        forext i < 29:
            if self.mask[i]:
                break
        for i <= j < i + k:
            top_k_row_span_sum += self.mask[j].right_mass()
        return top_k_row_span_sum as f32

fn horizontal_extend(a: r32, x: r32) -> r32:
    let mut y = a & (x | (x << 1) | (x >> 1))
    let mut z = a & (y | (y << 1) | (y >> 1))
    while z != y:
        y = z
        z = a & (y | (y << 1) | (y >> 1))
    return y

pub fn find_connected_components(img: BinaryImage28) -> []ConnectedComponent:
    let mut result: []ConnectedComponent = []
    let mut unsearched = img.clone()
    for j < 30:
        while unsearched[j]:
            let a = unsearched[j]
            let shift = a.ctz()
            let mut mask = BinaryImage28()
            mask[j] = horizontal_extend(a, 1r32 << shift)
            let mut flag = false
            while !flag:
                flag = true
                let mut i = j
                forext i < 30 - 1:
                    let old_row = mask[i + 1]
                    let new_row = old_row | horizontal_extend(img[i + 1], mask[i])
                    if !new_row:
                        break
                    if old_row != new_row :
                        flag = false
                        mask[i + 1] = new_row
                forext i >= j:
                    let old_row = mask[i]
                    let new_row = old_row | horizontal_extend(img[i], mask[i + 1])
                    if old_row != new_row:
                        flag = false
                        mask[i] = new_row
            for j <= k < 30:
                unsearched[k] &= (~mask[k])
            result.push(ConnectedComponent(mask))
    return result

