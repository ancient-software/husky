use super::*

val upper_mouth_match: FermiMatchResult =
    fermi_match(major_concave_components, [big_mouth])

pub(super) val is_eight: OneVsAll MnistLabel MnistLabel::Eight  =
    // require major_connected_component.max_hole_ilen >= 1.
 
    let upper_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
         
    // require upper_excess>-5.0 and upper_excess<37.0

    // if major_connected_component.max_hole_ilen == 2.0:
    //     MnistLabel::Eight

    if major_connected_component.eff_holes.matches[1] be None:
        if major_connected_component.eff_holes.matches[0] be None:
            require false
        require false
    OneVsAll::Yes

fn big_mouth(cc: ~ConcaveComponent)->?f32:
    if cc.relative_bounding_box.ymax()>0.5:
        require cc.strokes.first()!.start.x > cc.strokes.first()!.end.x
    cc.relative_bounding_box.ymax()
