use domains::ml::datasets::cv::mnist::MnistLabel
use domains::ml::models::normalize::normalize_vmax_f32
use domains::ml::models::boosting::boosting_with_vmax_normalized
use domains::ml::models::narrow::narrow_down
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*

fn left_components -> FermiMatchResult:
    fermi_match(major_concave_components, [left_coordinate_max, left_coordinate_max])

fn left_coordinate_max(cc: ~ConcaveComponent) -> ?f32:
    cc.relative_bounding_box.xmax()


fn components_max_downwards -> FermiMatchResult:
    fermi_match(major_concave_components, [displacement_downwards])

fn components_max_heights -> FermiMatchResult:    
    fermi_match(major_concave_components, [cc_box_heights])

mm is_four -> ?MnistLabel:

    // Type I four, the horizontal line is long
    // Take two left components and decide which one is the upper and lower.
    require left_components.matches[0] be some 
    require left_components.matches[1] be some

    // left_component_upper = left_components.matches[1]
    // left_component_lower = left_components.matches[0]

    // if left_components.matches[0].relative_bounding_box.ymax() > left_components.matches[1].relative_bounding_box.ymax():
    //     left_component_upper = left_components.matches[0]
    //     left_component_lower = left_components.matches[1]
    
    // (a1, a2) =:
    //     if left_components.matches[0].relative_bounding_box.ymax() > left_components.matches[1].relative_bounding_box.ymax():
    //         left_component_upper = left_components.matches[0]
    //         left_component_lower = left_components.matches[1]
    //         (left_component_upper, left_component_lower)
    //     else:
    //         (_, _)


    // require left_component_upper.strokes.end - left_component_upper.strokes.start == 2
    // require left_component_lower.matches[1].strokes.end - left_component_lower.strokes.start == 2


    
    // require left_component_upper.
    

    // angle changes

    // Type II four, with no hole, the horizontal line is short

    let eff_holes = major_connected_component.eff_holes

    require eff_holes.matches[1] be none    // hole.mass



    // Type III four, with hole, the horizontal line is short 



    // Type IV four, with hole and the horizontal line is short, possibly confused with nine


    let down_match = components_max_downwards.matches[0]
    require down_match be some
    let down_match_dp_y = down_match.displacement().y
    
    let higher_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
    require higher_excess>7.0

    if eff_holes.matches[0] be none:
        require major_concave_components.ilen()>=2
        let four_match_refine_result = components_max_heights.matches[0]
        require four_match_refine_result be some
        require components_max_heights.norm <1.0
        let higher_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
        let upper_arc = components_max_heights.matches[0]
        require upper_arc be some
        require upper_arc.displacement().y > 0.0
        require upper_arc.angle_change < -110.0
        require components_max_heights.norm < 9.0
        let a = major_connected_component.top_k_row_right_mass_sum(3)

        require a < 22.0
        require a > 9.0
        MnistLabel::Four
    

    // narrow_down(
    //     MnistLabel::Four,
    //     15,
    //     four_match_refine,
    //     ignored_connected_components_row_span_sum_sum,
    //     higher_excess,
    //     major_connected_component.top_k_row_span_sum(6),
    // )?

    MnistLabel::Four

fn displacement_downwards(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y < 0.0
    dp.y

fn cc_box_heights(cc: ~ConcaveComponent)-> ?f32:
    let dp = cc.displacement()
    require dp.y >0.0
    require cc.relative_bounding_box.ymin()>0.4
    // dp = cc.displacement()
    // require dp.y.abs()<7.0
    cc.relative_bounding_box.ymin()

