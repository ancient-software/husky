use super::*

val nine_match: FermiMatchResult =
    fermi_match(major_concave_components, [downmost])

val nine_match_refine: FermiMatchResult =
    fermi_match(major_concave_components, [big_cc])

pub(super) val is_nine: ?MnistLabel =
    require is_zero be none
    require is_six be none 
    let eff_holes = major_connected_component.eff_holes

    require eff_holes.matches[1] be none

    let down_match=nine_match.matches[0]
    require down_match be some
    let down_match_dp_y = down_match.displacement().y
    
    let higher_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
    require higher_excess>7.0

    if eff_holes.matches[0] be none:
        require major_concave_components.ilen()>=2
        let nine_match_refine_result=nine_match_refine.matches[0]
        require nine_match_refine_result be some
        require nine_match_refine.norm <1.0
        let higher_excess = major_connected_component.upper_mass - major_connected_component.lower_mass
        let upper_arc = nine_match_refine.matches[0]
        require upper_arc be some
        require upper_arc.displacement().y > 0.0
        require upper_arc.angle_change < -110.0
        require nine_match_refine.norm < 9.0
        let a = major_connected_component.top_k_row_right_mass_sum(3)

        require a < 22.0
        require a > 9.0
        return MnistLabel::Nine
    

    // narrow_down(
    //     MnistLabel::Nine,
    //     15,
    //     nine_match_refine,
    //     ignored_connected_components_row_span_sum_sum,
    //     higher_excess,
    //     major_connected_component.top_k_row_span_sum(6),
    // )?

    MnistLabel::Nine

fn downmost(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y < 0.0
    dp.y

fn big_cc(cc: ~ConcaveComponent)-> ?f32:
    let dp = cc.displacement()
    require dp.y >0.0
    require cc.relative_bounding_box.ymin()>0.4
    // dp = cc.displacement()
    // require dp.y.abs()<7.0
    cc.relative_bounding_box.ymin()