use super::*

val one_fermi_match: FermiMatchResult =
    fermi_match(major_concave_components, [downmost, upmost, hat])

pub val is_one: OneVsAll MnistLabel MnistLabel::One =
    narrow_down(
        major_connected_component.max_hole_ilen,
        ignored_connected_components_row_span_sum_sum,
        skip = 5,
    )?
    let simp_one_match = fermi_match(major_concave_components, [])
    if simp_one_match.norm < 3.0:
        narrow_down(
            major_connected_component.max_row_span,
            skip = 5,
        )?
        if major_connected_component.max_row_span > 6.5:
            require major_connected_component.max_hole_ilen == 0.0
        MnistLabel::One
    else:
        require major_connected_component.max_hole_ilen == 0.0
        require ignored_connected_components_row_span_sum_sum == 0.0
        let downmost = one_fermi_match.matches[0]
        let upmost = one_fermi_match.matches[1]
        let hat = one_fermi_match.matches[2]
        if downmost be none:
            require simp_one_match.norm < 4.2
            narrow_down(
                simp_one_match.angle_change_norm.abs(),
                skip = 5,
            )?
            require 2.0 * major_connected_component.lower_mass - major_connected_component.upper_mass < 52.0
            return MnistLabel::One
        let downmost_number_of_strokes = downmost.strokes.end - downmost.strokes.start
        require one_fermi_match.norm < 1.0
        narrow_down(
            major_connected_component.top_k_row_span_sum(3),
            one_fermi_match.norm,
            one_fermi_match.rel_norm,
            one_fermi_match.angle_change_norm,
            skip = 12,
        )?
        narrow_down(
            one_fermi_match.matches[0].rel_norm,
            one_fermi_match.matches[0].angle_change.abs(),
            skip = 2,
        )?
        if upmost be some:
            // ad hoc; improve syntax
            require upmost.strokes.end - upmost.strokes.start == 2
            let long_vertical = upmost.strokes[upmost.strokes.start + 1]
            let long_vertical_dp = long_vertical.displacement()
            require long_vertical_dp.y > 0.0
            narrow_down(
                upmost.norm,
                upmost.rel_norm,
                upmost.angle_change.abs(),
                skip = 2,
            )?
            narrow_down( 
                long_vertical_dp.norm(),
                long_vertical_dp.x / long_vertical_dp.y,
                skip = 2,
            )?
        if hat be some:
            narrow_down(
                one_fermi_match.matches[2].norm,
                one_fermi_match.matches[2].rel_norm,
                one_fermi_match.matches[2].angle_change.abs(),
                skip = 2,
            )?
        // ad hoc
        require downmost_number_of_strokes == 3
        let downmost_hat = downmost.strokes[downmost.strokes.start]
        let downmost_hat_dp = downmost_hat.displacement()
        let downmost_feet = downmost.strokes[downmost.strokes.start + 2]
        let downmost_feet_dp = downmost_feet.displacement()
        narrow_down(
            downmost_hat_dp.y,
            downmost_feet_dp.y,
            skip = 5
        )?
        require downmost_number_of_strokes == 3
        let a = major_connected_component.lower_mass
        let b = major_connected_component.upper_mass
        let c = a - b
        let d = c + a
        require c >= -10.0
        require c <= 20.0
        MnistLabel::One

fn upmost(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y > 0.0
    dp.y

fn downmost(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y <= 0.0
    -cc.end().y

fn hat(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y < 0.0
    require dp.x < 0.0
    -dp.y-dp.x
