use super::*

val three_fermi_match: FermiMatchResult =
    fermi_match(major_concave_components, [downarc, uparc, back])

    // tried:
    // us = uparc.start_tangent().angle(true)
    // ue = uparc.end_tangent().angle(true)
    // ds = downarc.start_tangent().angle(true)
    // a = three_fermi_match.norm 
    // b = downarc.angle_change
    // narrow_down(MnistLabel::Three,20,us,ue,ds,a,b)?
    // a = uparc.norm 
    // require a > 2.0 and a < 10.0

pub(super) val is_three: OneVsAll MnistLabel MnistLabel::Three =
    require major_concave_components.ilen() >= 2
    require major_concave_components.ilen() <= 4
    let downarc = three_fermi_match.matches[0]
    let uparc = three_fermi_match.matches[1]
    let back = three_fermi_match.matches[2]
    require downarc be some    
    require downarc!.norm > 3.0
    require uparc be some

    let de = downarc!.end_tangent().angle(true)
    require de > 0.0 or de < -100.0
    let downarc_enpoint = downarc!.end()
    let uparc_startpoint = uparc!.start()
    let distance = downarc_enpoint.dist(uparc_startpoint)
    require distance < 20.0

    // to improve
    require three_fermi_match.norm < 2.5
    require downarc!.angle_change < -100.0

    OneVsAll::Yes


fn uparc(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y <= 0.0
    Some(-cc.bounding_box.ymin())
    
fn downarc(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y <= 0.0
    Some(-cc.bounding_box.ymin())

fn back(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y >= 0.0
    Some(-cc.bounding_box.ymin())