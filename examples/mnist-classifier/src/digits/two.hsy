
use domains::ml::datasets::cv::mnist::MnistLabel
use domains::ml::models::normalize::normalize_vmax_f32
use domains::ml::models::boosting::boosting_with_vmax_normalized
use domains::ml::models::narrow::narrow_down
use crate::*

fn two_match -> FermiMatchResult:
    fermi_match(major_concave_components,[left_cc_pattern, right_cc_pattern,down_cc_pattern])


fn left_cc_pattern(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y < 0.0
    dp.y

fn right_cc_pattern(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.y > 0.0
    dp.y

fn down_cc_pattern(cc: ~ConcaveComponent) -> ?f32:
    let dp = cc.displacement()
    require dp.x > 0.0
    // require cc.relative_bounding_box.ymin()<0.2
    dp.x

pub(super) gn is_two -> ?MnistLabel:
    require is_zero be none
    require is_three be none
    require is_seven be none
    require is_one be none 
    require is_nine be none
    require is_six be none

    let cc_num = major_concave_components.ilen()
    let eff_holes = major_connected_component.eff_holes
    
    require eff_holes.matches[1] be none
    let left_cc = two_match.matches[0]
    let right_cc = two_match.matches[1]
    let down_cc = two_match.matches[2]

    require cc_num<=3

    let lower_excess = major_connected_component.lower_mass - major_connected_component.upper_mass

    require lower_excess > 10.0

    if cc_num == 2:
        require left_cc be some
        require right_cc be some
        let a = right_cc.angle_change
        require a>-180.0
        // get the end line of the cc
        let end_tan = left_cc.end_tangent().angle(true)
        // require end_tan < -200.0
        let x = left_cc.end_tangent().x
        let y = left_cc.end_tangent().y

        let left_ymax = left_cc.relative_bounding_box.ymax()
        let left_ymin = left_cc.relative_bounding_box.ymin()
        let left_mid_y = (left_ymax + left_ymin) / 2.0

        let right_ymax = right_cc.relative_bounding_box.ymax()
        let right_ymin = right_cc.relative_bounding_box.ymin()
        let right_mid_y = (right_ymax + right_ymin) / 2.0
        require left_mid_y >= right_mid_y

    // if cc_num == 2:
    //     require major_connected_component.eff_holes.matches[0] be none
    if cc_num==3:
        require left_cc be some
        require right_cc be some
        require down_cc be some
        require down_cc.relative_bounding_box.ymin() <0.4
        let a = down_cc.angle_change
    MnistLabel::Two