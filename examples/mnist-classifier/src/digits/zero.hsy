use super::*

val open_one_match: FermiMatchResult =
    fermi_match(major_concave_components, [almost_closed])

fn almost_closed(cc: ~ConcaveComponent) -> ?f32:
    require cc.angle_change + 0.0 < -140.0
    -cc.angle_change + 0.0

pub(super) val is_zero: OneVsAll MnistLabel MnistLabel::Zero =
    require is_one be none
    if major_connected_component.raw_contours.ilen() == 1:
        let n = open_one_match.norm
        require n < 1.5
        require open_one_match.matches[0] be some
        require connected_components.ilen() == 1
        let c = open_one_match.matches[0].displacement().norm()
        require c < 5.5
        return OneVsAll::Yes
    let simp_zero_match = fermi_match(major_concave_components, [])
    narrow_down(
        simp_zero_match.norm,
        simp_zero_match.rel_norm,
        simp_zero_match.angle_change_norm,
        skip = 5
    )?
    require simp_zero_match.norm < 3.0
    require major_connected_component.eff_holes.matches[1] be none
    // require major_concave_components.ilen() <= 1 failed
    require major_connected_component.eff_holes.matches[0] be some
    let major_hole = major_connected_component.eff_holes.matches[0]
    let a = major_hole.bounding_box.ymax() - major_hole.bounding_box.ymin()
    let b = major_line_segment_sketch.bounding_box.ymax() - major_line_segment_sketch.bounding_box.ymin()
    // high_point, low_point
    let ratio = a/b
    require ratio > 0.4
    let a = simp_zero_match.norm
    OneVsAll::Yes