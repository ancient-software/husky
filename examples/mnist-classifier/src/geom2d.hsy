pub struct Point2d {
    x: f32,
    y: f32,
}

impl Point2d:
    static fn from_i_shift28(i: i32, shift: i32) -> Point2d:
        Point2d((29 - shift) as f32, (29 - i) as f32)

    fn vector() -> Vector2d:
        Vector2d(self.x, self.y)

    fn to(other: Point2d) -> Vector2d:
        Vector2d(other.x - self.x, other.y - self.y)

    fn norm() -> f32:
        (self.x * self.x + self.y * self.y).sqrt()

    fn dist(other: Point2d) -> f32:
        self.to(other).norm()

pub struct RelativePoint2d {
    x: f32,
    y: f32,
}

pub struct Vector2d {
    x: f32,
    y: f32,
}

impl Vector2d:
    pub fn point() -> Point2d:
        Point2d(self.x, self.y)

    pub fn to(other: Vector2d) -> Vector2d:
        Vector2d(other.x - self.x, other.y - self.y)

    fn norm() -> f32:
        (self.x * self.x + self.y * self.y).sqrt()

    fn dot(other: Vector2d) -> f32:
        self.x * other.x + self.y * other.y

    fn cross(other: Vector2d) -> f32:
        self.x * other.y - self.y * other.x

    fn angle(is_branch_cut_positive: bool) -> f32:
        let cos_value = (self.x / self.norm()).min(1.)
        if cos_value + 1.0 < 0.001:
            if is_branch_cut_positive:
                180.0
            else:
                -180.0
        else:
            (self.y.sgnx() as f32) * self.cos_value.acos() * 180.0 / 3.1415926

    // rotation direction from self to other with minimal angle
    fn rotation_direction_to(other: Vector2d) -> i32:
        // +1: counterclockwise
        // -1: clockwise
        // 0: no moving or 180 degree turn
        self.cross(other).sgnx()

    fn angle_to(other: Vector2d, is_branch_cut_positive: bool) -> f32:
        let self_norm = self.norm()
        assert self_norm > 0.0
        let other_norm = other.norm()
        assert other_norm > 0.0
        let cos_value = (self.dot(other) / (self_norm * other_norm)).min(1.)
        if cos_value + 1.0 < 0.001:
            if is_branch_cut_positive:
                180.0
            else:
                -180.0
        else:
            let arc_angle = (self.rotation_direction_to(other) as f32) * cos_value.acos()
            arc_angle * 180.0 / 3.1415926

pub struct ClosedRange {
    min: f32,
    max: f32,
}

impl ClosedRange:
    fn relative_range(other: ClosedRange) -> ClosedRange:
        assert self.max > self.min
        let span = self.max - self.min
        let rel_min = (other.min - self.min) / span
        let rel_max = (other.max - self.min) / span
        ClosedRange(
            rel_min,
            rel_max,
        )
    
    fn relative_point(v: f32) -> f32:
        let span = self.max - self.min
        (v - self.min) / span

pub struct BoundingBox {
    pub xrange: ClosedRange,
    pub yrange: ClosedRange,
}

impl BoundingBox:
    fn relative_bounding_box(other: BoundingBox) -> RelativeBoundingBox:
        RelativeBoundingBox(
            self.xrange.relative_range(other.xrange),
            self.yrange.relative_range(other.yrange),
        )
    
    fn relative_point(point: Point2d) -> RelativePoint2d:
        RelativePoint2d(
            self.xrange.relative_point(point.x),
            self.yrange.relative_point(point.x),
        )
    
    fn xmin() -> f32:
        self.xrange.min
    
    fn xmax() -> f32:
        self.xrange.max
    
    fn ymin() -> f32:
        self.yrange.min
    
    fn ymax() -> f32:
        self.yrange.max

pub struct RelativeBoundingBox {
    xrange: ClosedRange,
    yrange: ClosedRange,
}

impl RelativeBoundingBox:
    fn xmin() -> f32:
        self.xrange.min
    
    fn xmax() -> f32:
        self.xrange.max
    
    fn ymin() -> f32:
        self.yrange.min
    
    fn ymax() -> f32:
        self.yrange.max