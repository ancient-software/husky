use crate::line_segment_sketch::*
use crate::line_segment_sketch::line_segment::*
use crate::line_segment_sketch::convexity::*
use crate::geom2d::*
use crate::*

pub struct ConcaveComponent {
    line_segment_sketch: &LineSegmentSketch,
    strokes: [%]LineSegmentStroke,
}

impl Visualize for ConcaveComponent:
    fn visualize() -> Html:
        self.strokes.visualize()

impl ConcaveComponent:
    val norm: f32 =
        // needs improvement
        self.hausdorff_norm
    
    val rel_norm: f32 =
        self.norm / self.displacement().norm()

    val hausdorff_norm: f32 =
        let mut hausdorff_norm = 0.0
        let curve_start = self.strokes.firstx().start
        let curve_ls = self.line_segment()
        let dp_norm = curve_ls.displacement().norm()
        // todo: change self to iter().max()
        for self.strokes.start <= i < self.strokes.end:
            let point = self.strokes[i].end
            let point_dist = curve_ls.dist_to_point(point)
            if point_dist > hausdorff_norm:
                hausdorff_norm = point_dist
        return hausdorff_norm

    val angle_change: f32 =
        let mut angle_change = 0.0
        let mut dp0 = self.strokes[self.strokes.start].displacement()
        // todo: change self for .. in ..[1..]
        for self.strokes.start < i < self.strokes.end:
            let dp = self.strokes[i].displacement()
            angle_change += dp0.angle_to(dp, true)
            dp0 = dp
        return angle_change
    
    val bounding_box: BoundingBox =
        let start_point = self.strokes.firstx().start
        let mut xmin = start_point.x
        let mut xmax = start_point.x
        let mut ymin = start_point.y
        let mut ymax = start_point.y
        for self.strokes.start <= i < self.strokes.end:
            let point = self.strokes[i].end
            xmin = xmin.min(point.x)
            xmax = xmax.max(point.x)
            ymin = ymin.min(point.y)
            ymax = ymax.max(point.y)
        return BoundingBox(
            ClosedRange(xmin, xmax), 
            ClosedRange(ymin, ymax),
        )
    
    val relative_bounding_box: RelativeBoundingBox =
        self.line_segment_sketch.bounding_box.relative_bounding_box(self.bounding_box)

    fn line_segment() -> LineSegment:
        LineSegment(
            self.strokes.firstx().start.clone(),
            self.strokes.lastx().end.clone()
        )

    fn start() -> Point2d:
        self.strokes.firstx().start.clone()
    
    fn end() -> Point2d:
        self.strokes.lastx().end.clone()
    
    fn displacement() -> Vector2d:
        self.line_segment().displacement()

    fn start_tangent() -> Vector2d:
        self.strokes.firstx().displacement()        

    fn end_tangent() -> Vector2d:
        self.strokes.lastx().displacement()


pub fn find_concave_components(line_segment_sketch: &LineSegmentSketch) -> []ConcaveComponent:
    let mut concave_components: []ConcaveComponent = []
    let L = line_segment_sketch.strokes.ilen()
    let mut start = 0
    let mut end = 1
    while start > -L and !is_convex(line_segment_sketch, start):
        start--
    let ccv_start = start
    while start < ccv_start + L:
        while end <= start+L and !is_convex(line_segment_sketch, end):
            end++
        if end > start + 1:
            concave_components.push(ConcaveComponent(
                line_segment_sketch,
                line_segment_sketch.strokes.cyclic_slice(start, end))
            )
        start = end
        end = start + 1
    return concave_components