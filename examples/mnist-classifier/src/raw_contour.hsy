use crate::geom2d::*
use crate::connected_component::*
use crate::line_segment_sketch::*
use mnist::{BinaryImage28, BinaryGrid28}

struct RawContour {
    cc: &ConnectedComponent,
    points: []Point2d,
}

impl RawContour:
    func line_segment_sketch -> LineSegmentSketch:
        LineSegmentSketch::new(this, 1.4)

    proc bounding_box -> BoundingBox:
        let start_point = points[0]
        let mut xmin = start_point.x
        let mut xmax = start_point.x
        let mut ymin = start_point.y
        let mut ymax = start_point.y
        for i < points.ilen():
            let point = points[i]
            xmin = xmin.min(point.x)
            xmax = xmax.max(point.x)
            ymin = ymin.min(point.y)
            ymax = ymax.max(point.y)
        return BoundingBox(
            ClosedRange(xmin, xmax), 
            ClosedRange(ymin, ymax),
        )
    
    func relative_bounding_box -> RelativeBoundingBox:
        cc.raw_contours[0].bounding_box.relative_bounding_box(this.bounding_box)
    
    proc contour_len -> f32:
        let mut contour_len = 0.0
        for 0 < i < points.ilen():
            let a = points[i-1]
            let b = points[i]
            contour_len += (a.x - b.x).abs() + (a.y - b.y).abs()
        let a = points[points.ilen() - 1]
        let b = points[0]
        contour_len += (a.x - b.x).abs() + (a.y - b.y).abs()
        return contour_len

    func displacement(start: i32, end: i32) -> Vector2d:
        N = this.points.ilen()
        ct_start = this.points[start%N]
        ct_end = this.points[end%N]
        ct_start.to(ct_end)

    visual:
        <Contour points={this.points} />

enum Direction
| UP
| LEFT
| DOWN
| RIGHT

func get_pixel_pair(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & 3b32

func get_pixel_to_the_left(row: r32, j: i32) -> r32:
    (row >> j) & 1b32

func get_pixel_to_the_right(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & 1b32

func get_inward_direction(
    row_above: r32,
    row_below: r32, j: i32,
) -> Direction:
    pixel_pair_above = get_pixel_pair(row_above, j)
    pixel_pair_below = get_pixel_pair(row_below, j)
    match pixel_pair_above with
    | 0 =>:
        match pixel_pair_below with
        | 1
        | 3 => Direction::LEFT
        | 2 => Direction::UP
        | _ => unreachable
    | 1 => Direction::DOWN
    | 2 =>: 
        match pixel_pair_below with
        | 0 => Direction::RIGHT
        | 1
        | 3 => Direction::LEFT
        | 2 =>Direction::UP
        | _ => unreachable
    | 3 =>:
        match pixel_pair_below with
        | 0
        | 1 => Direction::RIGHT
        | 2 => Direction::UP
        | _ => unreachable
    | _ => unreachable

func get_angle_change(inward: Direction, outward: Direction) -> i32:
    raw_angle_change = (((outward as i32) - (inward as i32)) as r32).last_bits(2)
    match raw_angle_change:
    | 0
    | 1
    | 2 => raw_angle_change as i32
    | 3 => -1
    | _ => unreachable

func get_outward_direction(
    row_above: r32,
    row_below: r32,
    j: i32,
    inward_direction: Direction,
) -> Direction:
    pixel_pair_above = get_pixel_pair(row_above, j)
    pixel_pair_below = get_pixel_pair(row_below, j)
    match pixel_pair_above with
    | 0 =>:
        match pixel_pair_below with
        | 1 => Direction::DOWN
        | 2
        | 3 => Direction::LEFT
        | _ => unreachable
    | 1 =>:
        match pixel_pair_below with
        | 0 => Direction::RIGHT
        | 1 => Direction::DOWN
        | 2 =>:
            match inward_direction with
            | Direction::DOWN => Direction::LEFT
            | Direction::UP => Direction::RIGHT
            | _ => unreachable
        | 3 => Direction::LEFT
        | _ => unreachable
    | 2 =>:
        match pixel_pair_below with
        | 0
        | 2
        | 3 => Direction::UP
        | 1 =>:
            match inward_direction with
            | Direction::LEFT => Direction::UP
            | Direction::RIGHT => Direction::DOWN
            | _ => unreachable
        | _ => unreachable
    | 3 =>:
        match pixel_pair_below with
        | 0
        | 2 => Direction::RIGHT
        | 1 => Direction::DOWN
        | _ => unreachable
    | _ => unreachable


struct StreakCache:
    prev1: i32
    prev2: i32

func get_concave_middle_point(points: []Point2d) -> Point2d:
    N = points.ilen()
    p0 = points[N-2]
    p2 = points[N-1]
    Point2d(
        (p0.x + p2.x) / 2.0, 
        (p0.y + p2.y) / 2.0,
    )

proc find_raw_contours(cc: &ConnectedComponent) -> []RawContour:
    let mut result = []RawContour()
    let mut boundary_unsearched = BinaryGrid28()
    for 1 <= i <= 29:
        let r_ur = cc.mask[i-1]
        let r_dr = cc.mask[i]
        let r_ul = r_ur << 1
        let r_dl = r_dr << 1
        boundary_unsearched[i] = (r_ur|r_dr|r_ul|r_dl) & (~(r_ur&r_dr&r_ul&r_dl))
    for 1 <= k <= 29:
        while boundary_unsearched[k]:
            let mut contour = []Point2d()
            let mut i = k
            let mut j = boundary_unsearched[k].ctz()
            // prepare rows
            let mut row_above = cc.mask[i-1]
            let mut row_below = cc.mask[i]
            // prepare pixel_pairs and initial inward direction
            let mut inward_direction = get_inward_direction(row_above, row_below, j)
            // store initial position and direction
            let i0 = i
            let j0 = j
            let dir0 = inward_direction
            let mut prev_angle_change1 = 0
            let mut prev_angle_change2 = 0
            let mut total_angle_change = 0
            // prepare streaks (raw line segment lengths)
            // -1 means invalid
            let mut prev_streak1 = -1
            let mut prev_streak2 = -1
            let mut current_streak = -1
            // loop in the geometric sense!
            do while !(i == i0 and j == j0 and inward_direction == dir0):
                let outward_direction = get_outward_direction(
                    row_above,
                    row_below,
                    j,
                    inward_direction
                )
                let angle_change = get_angle_change(inward_direction, outward_direction)
                // update boundary_unsearched
                boundary_unsearched[i] = boundary_unsearched[i] & (~(1b32 << j))
                if angle_change:
                    // update contour and previous streaks
                    if prev_angle_change1 == -1
                            and prev_angle_change2 == -1
                            and current_streak == 1
                            and prev_streak1 != -1
                            and prev_streak2 == 1:
                        contour.lastx() = get_concave_middle_point(contour)
                        contour.push(Point2d::from_i_shift28(i, j))
                        prev_streak2 = -1
                        prev_streak1 = -1
                    elif prev_angle_change1 == -1
                            and prev_streak1 > 0
                            and prev_streak1 == 1:
                        contour.lastx() = Point2d::from_i_shift28(i, j)
                        prev_streak2 = prev_streak1
                        prev_streak1 = current_streak
                    elif prev_angle_change1 == -1
                            and prev_streak1 > 0
                            and current_streak == 1
                            and prev_streak1 > 1:
                        contour.lastx() = Point2d::from_i_shift28(i, j)
                        prev_streak2 = -1
                        prev_streak1 = -1
                    else:
                        contour.push(Point2d::from_i_shift28(i, j))
                        prev_streak2 = prev_streak1
                        prev_streak1 = current_streak
                    // reset current streak
                    current_streak = 0
                    // update previous angle change
                    prev_angle_change2 = prev_angle_change1
                    prev_angle_change1 = angle_change
                // move
                // update i, j, row below and above
                match outward_direction:
                    case Direction::UP:
                        i = i - 1 
                        row_below = row_above
                        row_above = cc.mask[i-1]
                    case Direction::DOWN:
                        i = i + 1 
                        row_above = row_below
                        row_below = cc.mask[i]
                    case Direction::LEFT:
                        j = j + 1
                    case Direction::RIGHT:
                        j = j - 1
                // update inward_direction
                inward_direction = outward_direction
                // update streak
                if current_streak != -1:
                    current_streak++
            if prev_angle_change1 == -1 and current_streak == 1 and prev_streak1 > 0:
                contour.popx();
            result.push(RawContour(cc, contour))
    return result