inductive Nat
| Zero
| Succ(Nat)

impl Nat:
    function add: Nat -> Nat
    | Nat::Zero => self
    | Nat::Succ(a) => Nat::Succ(self.add(a))

theorem[basic] ∀ a b ∊ Nat, Nat::Succ(a) = b → Nat::Succ(Nat::Succ(a)) = Nat::Succ(b):
    rw

structure OddNat {
    inner: Nat,
    hvalid: ∃ x ∊ Nat, inner = Nat::Succ(x.add(x)),
}

structure EvenNat {
    inner: Nat,
    hvalid: ∃ x ∊ Nat, inner = x.add(x),
}