inductive Nat
| Zero
| Succ(Nat)

impl Nat:
    function add: Nat -> Nat
    | Zero => self
    | Succ(a) => Succ(self.add(a))

    theorem basic -> ∀ a b ∊ Nat, Succ(a) = b → Succ(Succ(a)) = Succ(b):
        rw

structure OddNat {
    inner: Nat,
    hvalid: ∃ x ∊ Nat, inner = Nat::Succ(x.add(x)),
}

structure EvenNat {
    inner: Nat,
    hvalid: ∃ x ∊ Nat, inner = x.add(x),
}