{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "husky",
    "fileTypes": ["hsk"],
    "scopeName": "source.husky",
    "patterns": [
        {
            "comment": "boxed slice literal",
            "begin": "(<)(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.brackets.angle.husky"
                },
                "2": {
                    "name": "punctuation.brackets.square.husky"
                }
            },
            "end": ">",
            "endCaptures": {
                "0": {
                    "name": "punctuation.brackets.angle.husky"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#gtypes"
                },
                {
                    "include": "#lvariables"
                },
                {
                    "include": "#lifetimes"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#types"
                }
            ]
        },
        {
            "comment": "macro type metavariables",
            "name": "meta.macro.metavariable.type.husky",
            "match": "(\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
            "captures": {
                "1": {
                    "name": "keyword.operator.macro.dollar.husky"
                },
                "3": {
                    "name": "keyword.other.crate.husky"
                },
                "4": {
                    "name": "entity.name.type.metavariable.husky"
                },
                "6": {
                    "name": "keyword.operator.key-value.husky"
                },
                "7": {
                    "name": "variable.other.metavariable.specifier.husky"
                }
            },
            "patterns": [
                {
                    "include": "#keywords"
                }
            ]
        },
        {
            "comment": "macro metavariables",
            "name": "meta.macro.metavariable.husky",
            "match": "(\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
            "captures": {
                "1": {
                    "name": "keyword.operator.macro.dollar.husky"
                },
                "2": {
                    "name": "variable.other.metavariable.name.husky"
                },
                "4": {
                    "name": "keyword.operator.key-value.husky"
                },
                "5": {
                    "name": "variable.other.metavariable.specifier.husky"
                }
            },
            "patterns": [
                {
                    "include": "#keywords"
                }
            ]
        },
        {
            "comment": "macro rules",
            "name": "meta.macro.rules.husky",
            "match": "\\b(macro_rules!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)",
            "captures": {
                "1": {
                    "name": "entity.name.function.macro.rules.husky"
                },
                "3": {
                    "name": "entity.name.function.macro.husky"
                },
                "4": {
                    "name": "entity.name.type.macro.husky"
                },
                "5": {
                    "name": "punctuation.brackets.curly.husky"
                }
            }
        },
        {
            "comment": "attributes",
            "name": "meta.attribute.husky",
            "begin": "(#)(\\!?)(\\[)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.attribute.husky"
                },
                "2": {
                    "name": "keyword.operator.attribute.inner.husky"
                },
                "3": {
                    "name": "punctuation.brackets.attribute.husky"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.brackets.attribute.husky"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#lifetimes"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#gtypes"
                },
                {
                    "include": "#types"
                }
            ]
        },
        {
            "comment": "modules",
            "match": "(mod)\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)",
            "captures": {
                "1": {
                    "name": "storage.type.husky"
                },
                "2": {
                    "name": "entity.name.module.husky"
                }
            }
        },
        {
            "comment": "external crate imports",
            "name": "meta.import.husky",
            "begin": "\\b(extern)\\s+(crate)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.husky"
                },
                "2": {
                    "name": "keyword.other.crate.husky"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.semi.husky"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#punctuation"
                }
            ]
        },
        {
            "comment": "use statements",
            "name": "meta.use.husky",
            "begin": "\\b(use)\\s",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.husky"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.semi.husky"
                }
            },
            "patterns": [
                {
                    "include": "#block-comments"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#namespaces"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#lvariables"
                }
            ]
        },
        {
            "include": "#block-comments"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#lvariables"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#gtypes"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#types"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#lifetimes"
        },
        {
            "include": "#macros"
        },
        {
            "include": "#namespaces"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "comment": "documentation comments",
                    "name": "comment.line.documentation.husky",
                    "match": "^\\s*///.*"
                },
                {
                    "comment": "line comments",
                    "name": "comment.line.double-slash.husky",
                    "match": "\\s*//.*"
                }
            ]
        },
        "block-comments": {
            "patterns": [
                {
                    "comment": "empty block comments",
                    "name": "comment.block.husky",
                    "match": "/\\*\\*/"
                },
                {
                    "comment": "block documentation comments",
                    "name": "comment.block.documentation.husky",
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "include": "#block-comments"
                        }
                    ]
                },
                {
                    "comment": "block comments",
                    "name": "comment.block.husky",
                    "begin": "/\\*(?!\\*)",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "include": "#block-comments"
                        }
                    ]
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "comment": "ALL CAPS constants",
                    "name": "constant.other.caps.husky",
                    "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
                },
                {
                    "comment": "constant declarations",
                    "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.husky"
                        },
                        "2": {
                            "name": "constant.other.caps.husky"
                        }
                    }
                },
                {
                    "comment": "decimal integers and floats",
                    "name": "constant.numeric.decimal.husky",
                    "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E)([+-])([\\d_]+))?(f32|i32|b32|b64)?\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.dot.decimal.husky"
                        },
                        "2": {
                            "name": "keyword.operator.exponent.husky"
                        },
                        "3": {
                            "name": "keyword.operator.exponent.sign.husky"
                        },
                        "4": {
                            "name": "constant.numeric.decimal.exponent.mantissa.husky"
                        },
                        "5": {
                            "name": "entity.name.type.numeric.husky"
                        }
                    }
                },
                {
                    "comment": "hexadecimal integers",
                    "name": "constant.numeric.hex.husky",
                    "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.husky"
                        }
                    }
                },
                {
                    "comment": "octal integers",
                    "name": "constant.numeric.oct.husky",
                    "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.husky"
                        }
                    }
                },
                {
                    "comment": "binary integers",
                    "name": "constant.numeric.bin.husky",
                    "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.husky"
                        }
                    }
                },
                {
                    "comment": "booleans",
                    "name": "constant.language.bool.husky",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "escapes": {
            "comment": "escapes: ASCII, byte, Unicode, quote, regex",
            "name": "constant.character.escape.husky",
            "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
            "captures": {
                "1": {
                    "name": "constant.character.escape.backslash.husky"
                },
                "2": {
                    "name": "constant.character.escape.bit.husky"
                },
                "3": {
                    "name": "constant.character.escape.unicode.husky"
                },
                "4": {
                    "name": "constant.character.escape.unicode.punctuation.husky"
                },
                "5": {
                    "name": "constant.character.escape.unicode.punctuation.husky"
                }
            }
        },
        "functions": {
            "patterns": [
                {
                    "comment": "pub as a function",
                    "match": "\\b(pub)(\\()",
                    "captures": {
                        "1": {
                            "name": "keyword.other.husky"
                        },
                        "2": {
                            "name": "punctuation.brackets.round.husky"
                        }
                    }
                },
                {
                    "comment": "function definition",
                    "name": "meta.function.definition.husky",
                    "begin": "\\b(fn)\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\()|(<))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.fn.husky"
                        },
                        "2": {
                            "name": "entity.name.function.husky"
                        },
                        "4": {
                            "name": "punctuation.brackets.round.husky"
                        },
                        "5": {
                            "name": "punctuation.brackets.angle.husky"
                        }
                    },
                    "end": "\\{|;",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.curly.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#lifetimes"
                        },
                        {
                            "include": "#macros"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "function/method calls, chaining",
                    "name": "meta.function.call.husky",
                    "begin": "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.husky"
                        },
                        "2": {
                            "name": "punctuation.brackets.round.husky"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#lifetimes"
                        },
                        {
                            "include": "#macros"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "function/method calls with turbofish",
                    "name": "meta.function.call.husky",
                    "begin": "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.husky"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.round.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#gtypes"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#lifetimes"
                        },
                        {
                            "include": "#macros"
                        },
                        {
                            "include": "#namespaces"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "control flow keywords",
                    "name": "keyword.control.husky",
                    "match": "\\b(break|continue|for|forext|if|elif|else|match|case|default|return|do|while)\\b"
                },
                {
                    "comment": "storage keywords",
                    "name": "keyword.other.husky storage.type.husky",
                    "match": "\\b(let|var|mod)\\b"
                },
                {
                    "comment": "const keyword",
                    "name": "storage.modifier.husky",
                    "match": "\\b(const)\\b"
                },
                {
                    "comment": "type keyword",
                    "name": "keyword.declaration.type.husky storage.type.husky",
                    "match": "\\b(type)\\b"
                },
                {
                    "comment": "enum keyword",
                    "name": "keyword.declaration.enum.husky storage.type.husky",
                    "match": "\\b(enum)\\b"
                },
                {
                    "comment": "trait keyword",
                    "name": "keyword.declaration.trait.husky storage.type.husky",
                    "match": "\\b(trait)\\b"
                },
                {
                    "comment": "struct keyword",
                    "name": "keyword.declaration.struct.husky storage.type.husky",
                    "match": "\\b(struct)\\b"
                },
                {
                    "comment": "record keyword",
                    "name": "keyword.declaration.struct.husky storage.type.husky",
                    "match": "\\b(record)\\b"
                },
                {
                    "comment": "storage modifiers",
                    "name": "storage.modifier.husky",
                    "match": "\\b(abstract|static)\\b"
                },
                {
                    "comment": "other keywords",
                    "name": "keyword.other.husky",
                    "match": "\\b(as|async|assign|mut|mutate|become|box|dyn|move|final|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|interpret|where)\\b"
                },
                {
                    "comment": "fn",
                    "name": "keyword.other.fn.husky",
                    "match": "\\bfn\\b"
                },
                {
                    "comment": "func",
                    "name": "keyword.other.func.husky",
                    "match": "\\bfunc\\b"
                },
                {
                    "comment": "main",
                    "name": "keyword.other.main.husky",
                    "match": "\\bmain\\b"
                },
                {
                    "comment": "test",
                    "name": "keyword.other.test.husky",
                    "match": "\\btest\\b"
                },
                {
                    "comment": "def",
                    "name": "keyword.other.def.husky",
                    "match": "\\bdef\\b"
                },
                {
                    "comment": "proc",
                    "name": "keyword.other.proc.husky",
                    "match": "\\bproc\\b"
                },
                {
                    "comment": "dataset",
                    "name": "keyword.other.dataset.husky",
                    "match": "\\bdataset\\b"
                },
                {
                    "comment": "mut",
                    "name": "storage.modifier.mut.husky",
                    "match": "\\bmut\\b"
                },
                {
                    "comment": "logical operators",
                    "name": "keyword.operator.logical.husky",
                    "match": "(\\^|\\||\\|\\||&&|<<|>>|!| and | or |not )(?!=)"
                },
                {
                    "comment": "logical AND, borrow references",
                    "name": "keyword.operator.borrow.and.husky",
                    "match": "&(?![&=])"
                },
                {
                    "comment": "assignment operators",
                    "name": "keyword.operator.assignment.husky",
                    "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
                },
                {
                    "comment": "single equal",
                    "name": "keyword.operator.assignment.equal.husky",
                    "match": "(?<![<>])=(?!=|>)"
                },
                {
                    "comment": "comparison operators",
                    "name": "keyword.operator.comparison.husky",
                    "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
                },
                {
                    "comment": "math operators",
                    "name": "keyword.operator.math.husky",
                    "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
                },
                {
                    "comment": "less than, greater than (special case)",
                    "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
                    "captures": {
                        "1": {
                            "name": "punctuation.brackets.round.husky"
                        },
                        "2": {
                            "name": "punctuation.brackets.square.husky"
                        },
                        "3": {
                            "name": "punctuation.brackets.curly.husky"
                        },
                        "4": {
                            "name": "keyword.operator.comparison.husky"
                        },
                        "5": {
                            "name": "punctuation.brackets.round.husky"
                        },
                        "6": {
                            "name": "punctuation.brackets.square.husky"
                        },
                        "7": {
                            "name": "punctuation.brackets.curly.husky"
                        }
                    }
                },
                {
                    "comment": "namespace operator",
                    "name": "keyword.operator.namespace.husky",
                    "match": "::"
                },
                {
                    "comment": "dereference asterisk",
                    "match": "(\\*)(?=\\w+)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.dereference.husky"
                        }
                    }
                },
                {
                    "comment": "subpattern binding",
                    "name": "keyword.operator.subpattern.husky",
                    "match": "@"
                },
                {
                    "comment": "dot access",
                    "name": "keyword.operator.access.dot.husky",
                    "match": "\\.(?!\\.)"
                },
                {
                    "comment": "ranges, range patterns",
                    "name": "keyword.operator.range.husky",
                    "match": "\\.{2}(=|\\.)?"
                },
                {
                    "comment": "colon",
                    "name": "keyword.operator.key-value.husky",
                    "match": ":(?!:)"
                },
                {
                    "comment": "dashrocket, skinny arrow",
                    "name": "keyword.operator.arrow.skinny.husky",
                    "match": "->"
                },
                {
                    "comment": "hashrocket, fat arrow",
                    "name": "keyword.operator.arrow.fat.husky",
                    "match": "=>"
                },
                {
                    "comment": "dollar macros",
                    "name": "keyword.operator.macro.dollar.husky",
                    "match": "\\$"
                },
                {
                    "comment": "question mark operator, questionably sized, macro kleene matcher",
                    "name": "keyword.operator.question.husky",
                    "match": "\\?"
                }
            ]
        },
        "interpolations": {
            "comment": "curly brace interpolations",
            "name": "meta.interpolation.husky",
            "match": "({)[^\"{}]*(})",
            "captures": {
                "1": {
                    "name": "punctuation.definition.interpolation.husky"
                },
                "2": {
                    "name": "punctuation.definition.interpolation.husky"
                }
            }
        },
        "lifetimes": {
            "patterns": [
                {
                    "comment": "named lifetime parameters",
                    "match": "(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.lifetime.husky"
                        },
                        "2": {
                            "name": "entity.name.type.lifetime.husky"
                        }
                    }
                },
                {
                    "comment": "borrowing references to named lifetimes",
                    "match": "(\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.borrow.husky"
                        },
                        "2": {
                            "name": "punctuation.definition.lifetime.husky"
                        },
                        "3": {
                            "name": "entity.name.type.lifetime.husky"
                        }
                    }
                }
            ]
        },
        "macros": {
            "patterns": [
                {
                    "comment": "macros",
                    "name": "meta.macro.husky",
                    "match": "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
                    "captures": {
                        "2": {
                            "name": "entity.name.function.macro.husky"
                        },
                        "3": {
                            "name": "entity.name.type.macro.husky"
                        }
                    }
                }
            ]
        },
        "namespaces": {
            "patterns": [
                {
                    "comment": "namespace (non-type, non-function path segment)",
                    "match": "(?<![A-Za-z0-9_])([a-z0-9_]+)((?<!super|self)::)",
                    "captures": {
                        "1": {
                            "name": "entity.name.namespace.husky"
                        },
                        "2": {
                            "name": "keyword.operator.namespace.husky"
                        }
                    }
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "comment": "numeric types",
                    "match": "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize|float|int|b32)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.numeric.husky"
                        }
                    }
                },
                {
                    "comment": "parameterized types",
                    "begin": "\\b([A-Z][A-Za-z0-9]*)(<)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.husky"
                        },
                        "2": {
                            "name": "punctuation.brackets.angle.husky"
                        }
                    },
                    "end": ">",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.brackets.angle.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#block-comments"
                        },
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#lvariables"
                        },
                        {
                            "include": "#lifetimes"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                },
                {
                    "comment": "primitive types",
                    "name": "entity.name.type.primitive.husky",
                    "match": "\\b(bool|char|str)\\b"
                },
                {
                    "comment": "trait declarations",
                    "match": "\\b(trait)\\s+([A-Z][A-Za-z0-9]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.trait.husky storage.type.husky"
                        },
                        "2": {
                            "name": "entity.name.type.trait.husky"
                        }
                    }
                },
                {
                    "comment": "struct declarations",
                    "match": "\\b(struct)\\s+([A-Z][A-Za-z0-9]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.struct.husky storage.type.husky"
                        },
                        "2": {
                            "name": "entity.name.type.struct.husky"
                        }
                    }
                },
                {
                    "comment": "enum declarations",
                    "match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.enum.husky storage.type.husky"
                        },
                        "2": {
                            "name": "entity.name.type.enum.husky"
                        }
                    }
                },
                {
                    "comment": "type declarations",
                    "match": "\\b(type)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.declaration.type.husky storage.type.husky"
                        },
                        "2": {
                            "name": "entity.name.type.declaration.husky"
                        }
                    }
                },
                {
                    "comment": "types",
                    "name": "entity.name.type.husky",
                    "match": "\\b[A-Z][A-Za-z0-9]*\\b(?!!)"
                }
            ]
        },
        "gtypes": {
            "patterns": [
                {
                    "comment": "option types",
                    "name": "entity.name.type.option.husky",
                    "match": "\\b(Some|None)\\b"
                },
                {
                    "comment": "result types",
                    "name": "entity.name.type.result.husky",
                    "match": "\\b(Ok|Err)\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "comment": "comma",
                    "name": "punctuation.comma.husky",
                    "match": ","
                },
                {
                    "comment": "curly braces",
                    "name": "punctuation.brackets.curly.husky",
                    "match": "[{}]"
                },
                {
                    "comment": "parentheses, round brackets",
                    "name": "punctuation.brackets.round.husky",
                    "match": "[()]"
                },
                {
                    "comment": "semicolon",
                    "name": "punctuation.semi.husky",
                    "match": ";"
                },
                {
                    "comment": "square brackets",
                    "name": "punctuation.brackets.square.husky",
                    "match": "[\\[\\]]"
                },
                {
                    "comment": "angle brackets",
                    "name": "punctuation.brackets.angle.husky",
                    "match": "(?<!=)[<>]"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "comment": "double-quoted strings and byte strings",
                    "name": "string.quoted.double.husky",
                    "begin": "(b?)(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.husky"
                        },
                        "2": {
                            "name": "punctuation.definition.string.husky"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escapes"
                        },
                        {
                            "include": "#interpolations"
                        }
                    ]
                },
                {
                    "comment": "double-quoted raw strings and raw byte strings",
                    "name": "string.quoted.double.husky",
                    "begin": "(b?r)(#*)(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.husky"
                        },
                        "2": {
                            "name": "punctuation.definition.string.raw.husky"
                        },
                        "3": {
                            "name": "punctuation.definition.string.husky"
                        }
                    },
                    "end": "(\")(\\2)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.husky"
                        },
                        "2": {
                            "name": "punctuation.definition.string.raw.husky"
                        }
                    }
                },
                {
                    "comment": "characters and bytes",
                    "name": "string.quoted.single.char.husky",
                    "begin": "(b)?(')",
                    "beginCaptures": {
                        "1": {
                            "name": "string.quoted.byte.raw.husky"
                        },
                        "2": {
                            "name": "punctuation.definition.char.husky"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.char.husky"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                }
            ]
        },
        "lvariables": {
            "patterns": [
                {
                    "comment": "self",
                    "name": "variable.language.self.husky",
                    "match": "\\b[Ss]elf\\b"
                },
                {
                    "comment": "super",
                    "name": "variable.language.super.husky",
                    "match": "\\bsuper\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "comment": "variables",
                    "name": "variable.other.husky",
                    "match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\b"
                }
            ]
        }
    }
}
