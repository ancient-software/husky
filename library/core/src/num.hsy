use crate::*
use crate::ops::Add

#[rust(i8)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern i8;

impl i8:
    pub fn abs() -> i8;

    pub fn max(other: i8) -> i8;

impl Add i8 for i8:
    pub fn add(other: i8) -> i8;

#[rust(i16)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern i16;

impl i16:
    pub fn abs() -> i16;

    pub fn max(other: i16) -> i16;

impl Add i32 for i16:
    pub fn add(other: i32) -> i16;

#[rust(i32)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern i32;

impl i32:
    pub fn abs() -> i32;

    pub fn max(other: i32) -> i32;
    
    pub fn min(other: i32) -> i32;

impl Add i32 for i32:
    fn add(other: i32) -> i32;

#[rust(i64)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern i64;

impl i64:
    pub fn abs() -> i64;

impl Add i64 for i64:
    pub fn add(other: i64) -> i64;

#[rust(i128)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern i128;

impl i128:
    pub fn abs() -> i128;

impl Add i128 for i128:
    pub fn add(other: i128) -> i128;

#[rust(isize)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern isize;

impl isize:
    pub fn abs() -> isize;

impl Add isize for isize:
    pub fn add(other: isize) -> isize;

#[rust(u8)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern u8;

impl u8:
    pub fn abs() -> u8;

impl Add u8 for u8:
    pub fn add(other: u8) -> u8;

#[rust(u16)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern u16;

impl u16:
    pub fn abs() -> u16;

impl Add u16 for u16:
    pub fn add(other: u16) -> u16;

#[rust(u32)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern u32;

impl u32:
    pub fn abs() -> u32;

impl Add u32 for u32:
    pub fn add(other: u32) -> u32;

#[rust(u64)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern u64;

impl u64:
    pub fn abs() -> u64;

impl Add u64 for u64:
    pub fn add(other: u64) -> u64;

#[rust(u128)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern u128;

impl u128:
    pub fn abs() -> u128;

impl Add u128 for u128:
    pub fn add(other: u128) -> u128;

#[rust(usize)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern usize;

impl usize:
    pub fn abs() -> usize;

impl Add usize for usize:
    pub fn add(other: usize) -> usize;

#[rust(f32)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern f32;

impl f32:
    pub fn abs() -> f32;

    pub fn sqrt() -> f32;

    pub fn max(other: f32) -> f32;

    pub fn min(other: f32) -> f32;
    
    pub fn sgnx() -> i32;

    pub fn cos() -> f32;

    pub fn sin() -> f32;

    pub fn acos() -> f32;

impl Add f32 for f32:
    fn add(other: f32) -> f32;

#[rust(f64)]
@derive(Debug, PartialEq, Eq, Clone, Copy)
pub extern f64;

impl f64:
    pub fn abs() -> f64;

    pub fn acos() -> f64;

impl Add f64 for f64:
    pub fn add(other: f64) -> f64;