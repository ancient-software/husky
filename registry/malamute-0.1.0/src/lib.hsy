:- default_const_excludes = (Task as ml_task::IsMlTask)::INPUT

#derive(Debug, Clone, Copy)
pub enum Class<Label>
| Known(Label)
| Unknown

#derive(Debug, Clone, Copy)
pub enum OneVsAll<#phan Label, #phan compterm label: Label>
| Yes
| No

impl<#phan Label, #phan compterm label: Label> Default for OneVsAll Label label:
    assoc fn default() -> Self:
        OneVsAll::No

impl<Label, #poly compterm label: Label> core::ops::Unveil OneVsAll Label label for Class Label:
    type Output = ()

    assoc fn unveil(one_vs_all: OneVsAll Label label) -> core::ops::ControlFlow Self ():
        match one_vs_all with
        | OneVsAll::Yes => core::ops::ControlFlow::Break(Class::Known(label))
        | OneVsAll::No => core::ops::ControlFlow::Continue(())

#derive(Debug, Clone, Copy)
pub enum OneVsAllResult<#phan Label, #phan compterm label: Label>
| ConfidentYes
| ConfidentNo
| Unconfident

impl<#phan Label, #phan compterm LABEL: Label> core::ops::Unveil OneVsAllResult Label LABEL for OneVsAll Label label:
    type Output = ()

    assoc fn unveil(one_vs_all_result: OneVsAllResult Label LABEL) -> core::ops::ControlFlow Self ():
        match one_vs_all_result with
        | OneVsAllResult::ConfidentYes => core::ops::ControlFlow::Break(OneVsAll::Yes)
        | OneVsAllResult::ConfidentNo => core::ops::ControlFlow::Break(OneVsAll::No)
        | OneVsAllResult::Unconfident => core::ops::ControlFlow::Continue(())

#dep(Task)
pub gn narrow_down<Label, #poly compterm label: Label>(
    ...[] f: f32,
    const skip: i32 = 5,
) -> OneVsAllResult Label label;