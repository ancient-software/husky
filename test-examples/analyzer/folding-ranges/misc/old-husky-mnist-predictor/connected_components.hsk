use mnist::bit::find_lowest_nonzero_bit_32
use mnist::bit::count_nonzero_bits
bit32 horizontal_extend(bit32 a, bit32 x) {
  bit32 y = a & (x | (x << 1) | (x >> 1));
  bit32 z = a & (y | (y << 1) | (y >> 1));
  while (z != y) {
      y = z;
      z = a & (y | (y << 1) | (y >> 1));
  }
  return y;
}
pub def find_connected_components(binary_img28 img)=>([]binary_img28 result) :
  var result = []binary_img28()
  var unsearched = img.clone()
  for j < 30:
    while unsearched[j]:
      let a = unsearched[j]
      let shift = find_lowest_nonzero_bit_32(a)
      var mask = binary_img28()
      mask[j] = horizontal_extend(a, bit32(1)<< shift)
      var flag = false
      while !flag :
        flag = true
        var i = j
        forext i < 30 - 1 :
          let old_row = mask[i + 1]
          let new_row = old_row | horizontal_extend(img[i + 1], mask[i])
          if !new_row :
            break
          if old_row != new_row :
            flag = false
            mask[i + 1] = new_row
        forext i >= j :
          let old_row = mask[i]
          let new_row = old_row | horizontal_extend(img[i], mask[i + 1])
          if old_row != new_row :
            flag = false
            mask[i] = new_row
      for j <= k < 30:
        unsearched[k] = unsearched[k] & (~mask[k])
      result.append(mask)
  return result

pub def integrate_from_top_to_down(binary_img28 img) => ([32]int integration):
  var integration = [32]int()
  integration[0] = count_nonzero_bits(img[0])
  for 0 < i < 32:
    integration[i] = integration[i-1] + count_nonzero_bits(img[i])
  return integration

pub def get_upper_mass_ratio(binary_img28 cc, [32]int integration) => (float upper_mass_ratio):
  var ymin = 0
  while ymin < 32 and not cc[ymin]:
    ymin++
  var ymax = 31
  while ymax > 0 and not cc[ymax]:
    ymax--
  let ysum = ymin + ymax
  let middle = ysum / 2
  if ysum % 2 == 0:
    return float(integration[middle])/float(integration[31])
  else:
    return (float(integration[middle]) + float(integration[middle+1]))/2.0/float(integration[31])
  // TODO: dedent

struct RowProjection : [32]int

pub def get_row_projection(binary_img28 img) => (RowProjection row_projection):
  var row_projection = RowProjection()
  for 0 <= i < 32:
    row_projection[i] = count_nonzero_bits(img[i])
  return row_projection

struct RowProjectionAnalysis {
  int jmin
  int jmax
  int pmin
  int pmin_j
  int pmax
  int pmax_j
}

pub def get_row_projection_analysis(RowProjection row_projection) => (RowProjectionAnalysis analysis):
  // min
  var jmin = 0
  while jmin < 31 and not row_projection[jmin]:
    jmin++
  var trimmed_jmin = jmin
  while trimmed_jmin < 31 and row_projection[trimmed_jmin] <= row_projection[trimmed_jmin+1]:
    trimmed_jmin++
  // max
  var jmax = 31
  while jmax > 0 and not row_projection[jmax]:
    jmax--
  var trimmed_jmax = jmax
  while trimmed_jmax > 0 and row_projection[trimmed_jmax] <= row_projection[trimmed_jmax-1]:
    trimmed_jmax--
  var pmin_j = trimmed_jmin
  var pmin = row_projection[trimmed_jmin]
  var pmax_j = trimmed_jmax
  var pmax = row_projection[trimmed_jmax]
  for trimmed_jmin <= j <= trimmed_jmax:
    let p = row_projection[j]
    if p < pmin:
      pmin_j = j
      pmin = p
    elif p > pmax:
      pmax_j = j
      pmax = p
  return RowProjectionAnalysis(jmin, jmax, pmin, pmin_j, pmax, pmax_j)









