proc for_loop1() -> i32:
    let mut b = 0
    for 0 < i < 5:
        b += 1
    return b

proc for_loop2() -> i32:
    let mut b = 0
    for i < 5:
        b += 1
    return b

proc for_loop3() -> i32:
    let mut b = 0
    for i < 5:
        b += i
    return b

proc for_loop4() -> i32:
    let mut b = 0
    for i < 5:
        let x = 1
        b += i
    return b

proc forext_loop1() -> i32:
    let mut b = 0
    let mut i = 3
    forext i < 5:
        b += 1
    return b

proc forext_loop2() -> i32:
    let mut b = 0
    let mut i = 3
    forext i > 0:
        b += 1
    return b

proc forext_loop3() -> i32:
    let mut b = 0
    let mut i = 3
    forext i > 0:
        let x = 1
        b += 1
    return b

proc while_loop1() -> i32:
    let mut b = 0
    while b < 5:
        b += 1
    return b

proc while_loop2() -> i32:
    let mut b = 5
    while b:
        b -= 1
    return b

proc while_loop3() -> i32:
    let mut b = 5
    while b < 3:
        b -= 1
    return b

proc while_loop4() -> i32:
    let mut b = 5
    while b < 3:
        let x = 2
        b -= 1
    return b

proc do_while_loop1() -> i32:
    let mut b = 0
    do while b < 5:
        b += 1
    return b

proc do_while_loop2() -> i32:
    let mut b = 5
    do while b:
        b -= 1
    return b

proc do_while_loop3() -> i32:
    let mut b = 5
    do while b < 3:
        b -= 1
    return b

proc do_while_loop4() -> i32:
    let mut b = 5
    do while b < 3:
        let mut y = -1
        b -= 1
    return b

task:
    ml::datasets::synthetic::trivial::real1d::dataset1()

main:
    assert for_loop1() == 4
    assert for_loop2() == 5
    assert for_loop3() == 10
    assert for_loop4() == 10
    assert forext_loop1() == 2
    assert forext_loop2() == 3
    assert forext_loop3() == 3
    assert while_loop1() == 5
    assert while_loop2() == 0
    assert while_loop3() == 5
    assert while_loop4() == 5
    assert do_while_loop1() == 5
    assert do_while_loop2() == 0
    assert do_while_loop3() == 4
    assert do_while_loop4() == 4
    1