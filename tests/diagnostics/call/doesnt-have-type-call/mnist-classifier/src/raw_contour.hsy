enum Direction:
    UP
    LEFT
    DOWN
    RIGHT


// pub func int int => Point2d point
// pub fn Point2dFromIJ28(i: int, j: int) -> Point2d
//   return Point2d(float(29 - j), float(29 - i))

func get_pixel_pair(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & 3r32

func get_pixel_to_the_left(row: r32, j: i32) -> r32:
    (row >> j) & r32(1)

func get_pixel_to_the_right(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & r32(1)

fn get_inward_direction(row_above: r32, row_below: r32, j: int) -> Direction
  let pixel_pair_above = get_pixel_pair row_above j
  let pixel_pair_below = get_pixel_pair row_below j
  switch pixel_pair_above
  case 0
    switch pixel_pair_below
    case 1
    case 3
      return Direction::Left
    case 2
      return Direction::Up
  case 1
    return Direction::Down
  case 2
    switch pixel_pair_below
    case 0
      return Direction::Right
    case 1
    case 3
      return Direction::Left
    case 2
      return Direction::Up
  case 3
    switch pixel_pair_below
    case 0
    case 1
      return Direction::Right
    case 2
      return Direction::Up

fn get_angle_change(inward: Direction, outward: Direction) -> int
  let raw_angle_change = bitmod outward.to_int() - inward.to_int() 2
  switch raw_angle_change
  case 0
  case 1
  case 2
    return raw_angle_change
  case 3
    return -1

fn get_outward_direction(
      row_above: r32,
      row_below: r32,
      j: int,
      inward_direction: Direction
    ) -> Direction
  let pixel_pair_above = get_pixel_pair row_above j
  let pixel_pair_below = get_pixel_pair row_below j
  switch pixel_pair_above
  case 0
    switch pixel_pair_below
    case 1
      return Direction::Down
    case 2
    case 3
      return Direction::Left
  case 1
    switch pixel_pair_below
    case 0
      return Direction::Right
    case 1
      return Direction::Down
    case 2
      switch inward_direction
      case Direction::Down
        return Direction::Left
      case Direction::Up
        return Direction::Right
      default
        assert false
    case 3
      return Direction::Left
  case 2
    switch pixel_pair_below
    case 0
    case 2
    case 3
      return Direction::Up
    case 1
      switch inward_direction
      case Direction::Left
        return Direction::Up
      case Direction::Right
        return Direction::Down
      default
        assert false
  case 3
    switch pixel_pair_below
    case 0
    case 2
      return Direction::Right
    case 1
      return Direction::Down