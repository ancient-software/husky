enum Direction:
    UP
    LEFT
    DOWN
    RIGHT


// pub func int int => Point2d point
// pub fn Point2dFromIJ28(i: int, j: int) -> Point2d
//   return Point2d(float(29 - j), float(29 - i))

func get_pixel_pair(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & 3r32

func get_pixel_to_the_left(row: r32, j: i32) -> r32:
    (row >> j) & 1r32

func get_pixel_to_the_right(row: r32, j: i32) -> r32:
    (row >> (j - 1)) & 1r32

func get_inward_direction(row_above: r32, row_below: r32, j: i32) -> Direction:
    let pixel_pair_above = get_pixel_pair row_above j
    let pixel_pair_below = get_pixel_pair row_below j
    match pixel_pair_above:
        case 0:
            match pixel_pair_below:
                case 1 | 3:
                    return Direction::LEFT
                case 2:
                    return Direction::UP
        case 1:
            return Direction::DOWN
        case 2:
            match pixel_pair_below
            case 0:
                return Direction::RIGHT
            case 1 | 3:
                return Direction::LEFT
            case 2:
                return Direction::UP
        case 3
            match pixel_pair_below
                case 0 | 1:
                    return Direction::RIGHT
                case 2
                    return Direction::UP

func get_angle_change(inward: Direction, outward: Direction) -> i32
    let raw_angle_change = (outward.to_i32() - inward.to_i32()).bitmod(2)
    match raw_angle_change:
        case 0:
        case 1:
        case 2:
            raw_angle_change
        case 3:
            -1

func get_outward_direction(
        row_above: r32,
        row_below: r32,
        j: i32,
        inward_direction: Direction
    ) -> Direction
    let pixel_pair_above = get_pixel_pair(row_above, j)
    let pixel_pair_below = get_pixel_pair(row_below, j)
    match pixel_pair_above:
        case 0:
            match pixel_pair_below
                case 1:
                    Direction::DOWN
                case 2:
                case 3:
                    Direction::LEFT
                default:
                    assert false
        case 1:
            match pixel_pair_below:
                case 0:
                    return Direction::RIGHT
                case 1:
                    Direction::DOWN
                case 2:
                    match inward_direction:
                        case Direction::DOWN:
                            Direction::LEFT
                        case Direction::UP:
                            Direction::RIGHT
                        default:
                            assert false
                case 3:
                    Direction::LEFT
        case 2:
            match pixel_pair_below:
                case 0:
                case 2:
                case 3:
                    Direction::UP
                case 1:
                    match inward_direction
                        case Direction::LEFT:
                            Direction::UP
                        case Direction::RIGHT:
                            Direction::DOWN
                        default:
                            assert false
        case 3:
            match pixel_pair_below:
                case 0:
                case 2:
                    return Direction::RIGHT
                case 1:
                    return Direction::DOWN