use crate::geom2d::*
use crate::raw_contour::RawContour

struct LineSegment:
    points: [%]Point2d
    start: Point2d := points.firstx().clone()
    end: Point2d := points.lastx().clone()

    static func new(ct: &RawContour, from: i32, to: i32) -> LineSegment:
        L = ct.points.ilen()
        pt_start = ct.points[from%L].clone()
        pt_end = ct.points[to%L].clone()
        LineSegment(ct.points.cyclic_slice(from, to + 1))

    func displacement() -> Vector2d:
        start.to(end)

    visual:
        <LineSegment start={this.start} end={this.end} />

struct LineSegmentSketch:
    line_segments: []LineSegment

    visual:
        this.line_segments

func go_right(u: Vector2d, r: f32) -> Vector2d:
    L = (u.x*u.x+u.y*u.y).sqrt()
    assert L > r
    dr = r*L/(L*L-r*r).sqrt()
    dx = dr*u.y/L
    dy = -dr*u.x/L
    Vector2d(u.x+dx, u.y+dy)

func go_left(u: Vector2d, r: f32) -> Vector2d:
    L = (u.x*u.x+u.y*u.y).sqrt()
    assert L > r
    dr = r*L/(L*L-r*r).sqrt()
    dx = -dr*u.y/L
    dy = dr*u.x/L
    Vector2d(u.x+dx, u.y+dy)

proc extend_end(ct: &RawContour, start: i32, r: f32) -> i32:
    let mut end = start
    let mut dp = ct.displacement(start, end + 1)
    let N = ct.points.ilen()
    let max_end = start + N
    while end <= max_end and dp.norm() < r:
        end++
        dp = ct.displacement(start, end + 1)
    if dp.norm() < r:
        return end
    let mut right_bound = go_right(dp, r)
    let mut left_bound = go_left(dp, r)
    let mut r_max = 0.0
    while end <= max_end
            and right_bound.rotation_direction_to(dp) >= 0 
            and dp.rotation_direction_to(left_bound) >= 0:
        let dp_norm = dp.norm()
        if dp_norm < r_max - r:
            break
        elif dp_norm > r_max:
            r_max = dp_norm
        if dp_norm > r:
            let dp_right = go_right(dp, r)
            let dp_left = go_left(dp, r)
            if right_bound.rotation_direction_to(dp_right) > 0:
                right_bound = dp_right
            if dp_left.rotation_direction_to(left_bound) > 0:
                left_bound = dp_left
        end++
        dp = ct.displacement(start, end + 1)
    assert end > start
    return end

proc extend_start(ct: &RawContour, start0: i32, end: i32, r: f32) -> i32:
    let mut start = end
    let mut dp0 = ct.displacement(end, start - 1)
    let min_start = end - ct.points.ilen()
    while start >= min_start and dp0.norm() < r:
        start--
        dp0 = ct.displacement(end, start - 1)
    if dp0.norm() < r:
        return start.min(start0)
    let mut right_bound = go_right(dp0, r)
    let mut left_bound = go_left(dp0, r)
    let mut r_max = 0.0
    while start >= min_start:
        let dp = ct.displacement(end, start - 1)
        let dp_norm = dp.norm()
        if dp_norm < r_max - r:
            break
        elif dp_norm > r_max:
            r_max = dp_norm
        if dp_norm > r:
            let dp_right = go_right(dp, r)
            let dp_left = go_left(dp, r)
            if right_bound.rotation_direction_to(dp_right) > 0:
                right_bound = dp_right
            if dp_left.rotation_direction_to(left_bound) > 0:
                left_bound = dp_left
            if right_bound.rotation_direction_to(left_bound) >= 0:
                if start <= start0 
                        and !(
                            right_bound.rotation_direction_to(dp) >= 0 
                            and dp.rotation_direction_to(left_bound) >= 0
                        ):
                    break
                start--
            else:
                break
    //assert start <= start0
    if start <= start0:
        return start
    else:
        return start0

proc find_line_segments(ct: &RawContour, r: f32) -> []LineSegment:
    let mut line_segments = []LineSegment()
    let mut start = 0
    let mut end = 1
    let mut max_end = ct.points.ilen()
    while end <= max_end:
        end = extend_end(ct, start, r)
        let ls_extend_end = LineSegment::new(ct, start, end)
        let mut extend_start_flag = true
        if line_segments.ilen() > 0:
            let dp_extend_end = ls_extend_end.displacement()
            let dp_previous = line_segments.lastx().displacement()
            if dp_extend_end.cross(dp_previous).abs() < 0.01 
                    and dp_extend_end.dot(dp_previous) > 0.0:
                let N = ct.points.ilen()
                line_segments.lastx() = LineSegment::new(ct, line_segments.lastx().points.start, end)
                extend_start_flag = false
        if extend_start_flag:
            start = extend_start(ct, start, end, r)
            let mut ls = LineSegment::new(ct, start, end)
            if line_segments.ilen() > 0:
                let ls_last = line_segments.lastx()
                let dp_last = ls_last.displacement()
                let dp = ls.displacement()
                let dp1 = ls_last.start.to(ls.end)
                if dp.cross(dp_last).abs() < 0.001 
                        and dp.dot(dp_last) > 0.0 
                        and dp.cross(dp1).abs()<0.001 
                        and dp.dot(dp1) > 0.0:
                    line_segments.popx();
                    ls = LineSegment::new(ct, ls_last.points.start, ls.points.end)
            else:
                    max_end = start + ct.points.ilen()
            line_segments.push(ls)
        start = end
        end = start + 1
    let N = ct.points.ilen()
    let first_line_segment_points_end = line_segments.firstx().points.end
    let last_line_segment = line_segments.lastx()
    if last_line_segment.points.end >= first_line_segment_points_end + N:
        line_segments.popx();
        line_segments.firstx() = LineSegment::new(ct, last_line_segment.points.start - N, line_segments.firstx().points.end)
    return line_segments