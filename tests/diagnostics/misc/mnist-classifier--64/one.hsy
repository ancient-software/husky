use cv::datasets::mnist::MnistLabel
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*

func one_fermi_match_others -> []&ConcaveComponent:
    one_fermi_match.others

def is_one -> ?MnistLabel:
    require connected_components.ilen() == 1
    require major_connected_component.raw_contours
    require one_fermi_match.others.ilen() == 0
    a = input.clone()
    MnistLabel::One

func one_fermi_match -> FermiMatchResult:
    fermi_match(major_concave_components, [downmost, upmost])

func upmost(cc: &ConcaveComponent) -> ?f32:
    require cc.displacement.y > 0.0
    cc.displacement.y

func downmost(cc: &ConcaveComponent) -> ?f32:
    require cc.displacement.y <= 0.0
    -cc.displacement.y