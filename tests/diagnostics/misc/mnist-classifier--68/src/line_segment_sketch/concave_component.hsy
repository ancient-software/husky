use crate::line_segment_sketch::*
use crate::line_segment_sketch::line_segment::*
use crate::line_segment_sketch::convexity::*
use crate::geom2d::*

struct ConcaveComponent:
    line_segment_sketch: &LineSegmentSketch
    strokes: [%]LineSegmentStroke

    func norm -> f32:
        // temp
        1.0
    
    func line_segment -> LineSegment:
        LineSegment(
            strokes.firstx().start.clone(),
            strokes.lastx().end.clone()
        )

    func displacement() -> Vector2d:
        this.line_segment.displacement()

    proc hausdorff_width -> f32:
        // temp
        let mut hausdorff_width = 0.0
        let curve_start = strokes.firstx().start
        let dp = this.displacement
        let dp_norm = dp.norm()
        for strokes.start <= i < strokes.end:
            let point = strokes[i].end
            let point_dp = curve_start.to(point)
            // let d
            // todo
        return 1.0
// pub func LineSegmentSketch => []float hausdorff_deviations
// def get_concave_hausdorff_deviations(lsg_sk) 
//   let mut hausdorff_deviations = []float()
//   let L = lsg_sk.line_segments.size()
//   for i < lsg_sk.concave_components.size()
//     let interval = lsg_sk.concave_components[i]
//     let mut absolute_hausdorff_deviation = 0.0
//     let curve_start = lsg_sk.line_segments[interval.start%L].start
//     let curve_end = lsg_sk.line_segments[(interval.end-1)%L].end
//     let curve_displacement = geom2d::get_displacement(curve_start, curve_end)
//     let curve_displacement_norm = get_norm(curve_displacement)
//     for interval.start <= j < interval.end
//       let point = lsg_sk.line_segments[j%L].end
//       let displacement = geom2d::get_displacement(curve_start, point)
//       absolute_hausdorff_deviation = max(absolute_hausdorff_deviation, get_line_point_distance(curve_displacement, displacement))
//     hausdorff_deviations.append(absolute_hausdorff_deviation/curve_displacement_norm)
//   return hausdorff_deviations

    visual:
        strokes

proc find_concave_components(line_segment_sketch: &LineSegmentSketch) -> []ConcaveComponent:
    let mut concave_components = []ConcaveComponent()
    let L = line_segment_sketch.strokes.ilen()
    let mut start = 0
    let mut end = 1
    while start > -L and !is_convex(line_segment_sketch, start):
        start--
    let ccv_start = start
    while start < ccv_start + L:
        while end <= start+L and !is_convex(line_segment_sketch, end):
            end++
        if end > start + 1:
            concave_components.push(ConcaveComponent(
                line_segment_sketch,
                line_segment_sketch.strokes.cyclic_slice(start, end))
            )
        start = end
        end = start + 1
    return concave_components