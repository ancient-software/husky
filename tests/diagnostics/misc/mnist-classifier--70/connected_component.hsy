use cv::datasets::mnist::BinaryImage28
use crate::raw_contour::*

struct ConnectedComponent:
    mask: BinaryImage28

    func raw_contours -> []RawContour:
        find_raw_contours(this)

    proc max_hole_ilen -> f32:
        // todo: change this to iter
        var max_hole_ilen = 0
        let raw_contours = this.raw_contours
        for 0 < i < raw_contours.ilen():
            let hole_ilen = raw_contours[i].points.ilen()
            if max_hole_ilen < hole_ilen:
                max_hole_ilen = hole_ilen
        return max_hole_ilen as f32
    
    proc max_row_span -> f32:
        // todo: change this to func
        var max_row = 0
        for 0 < i < 29:
            max_row = max_row.max(mask[i].span())
        return max_row as f32

    visual:
        mask

proc horizontal_extend(a: b32, x: b32) -> b32:
    var y = a & (x | (x << 1) | (x >> 1))
    var z = a & (y | (y << 1) | (y >> 1))
    while z != y:
        y = z
        z = a & (y | (y << 1) | (y >> 1))
    return y

proc find_connected_components(img: BinaryImage28) -> []ConnectedComponent:
    var result = []ConnectedComponent()
    var unsearched = img.clone()
    for j < 30:
        while unsearched[j]:
            let a = unsearched[j]
            let shift = a.ctz()
            var mask = BinaryImage28()
            mask[j] = horizontal_extend(a, 1b32 << shift)
            var flag = false
            while !flag :
                flag = true
                var i = j
                forext i < 30 - 1:
                    let old_row = mask[i + 1]
                    let new_row = old_row | horizontal_extend(img[i + 1], mask[i])
                    if !new_row:
                        break
                    if old_row != new_row :
                        flag = false
                        mask[i + 1] = new_row
                forext i >= j:
                    let old_row = mask[i]
                    let new_row = old_row | horizontal_extend(img[i], mask[i + 1])
                    if old_row != new_row:
                        flag = false
                        mask[i] = new_row
            for j <= k < 30:
                unsearched[k] &= (~mask[k])
            result.push(ConnectedComponent(mask))
    return result

