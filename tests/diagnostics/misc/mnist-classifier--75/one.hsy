use cv::datasets::mnist::MnistLabel
use domains::ml::models::normalize::normalize_vmax_f32
use domains::ml::models::boosting::boosting_with_vmax_normalized
use domains::ml::models::narrow::narrow_down
use crate::major::*
use crate::fermi::*
use crate::line_segment_sketch::concave_component::*

func one_fermi_match -> FermiMatchResult:
    fermi_match(major_concave_components, [downmost, upmost, hat])

def is_one -> ?MnistLabel:
    narrow_down(
        MnistLabel::One,
        major_connected_component.max_hole_ilen,
        ignored_connected_components_row_span_sum_sum
    )?
    simp_one_match = fermi_match(major_concave_components, [])
    if simp_one_match.norm < 3.0:
        narrow_down(
            MnistLabel::One,
            major_connected_component.max_row_span
        )?
        if major_connected_component.max_row_span > 6.5:
            require major_connected_component.max_hole_ilen == 0.0
        MnistLabel::One
    else:
        require major_connected_component.max_hole_ilen == 0.0
        downmost = one_fermi_match.matches[0]
        upmost = one_fermi_match.matches[1]
        hat = one_fermi_match.matches[2]
        if downmost be none:
            require simp_one_match.norm < 4.2
            narrow_down(
                MnistLabel::One,
                simp_one_match.angle_change_norm.abs()
            )?
            MnistLabel::One
        downmost_number_of_strokes = downmost.strokes.end - downmost.strokes.start
        require one_fermi_match.norm < 1.0
        require major_connected_component.top_k_row_span_sum(3) < 14.5
        narrow_down(
            MnistLabel::One,
            one_fermi_match.norm,
            one_fermi_match.rel_norm,
            one_fermi_match.angle_change_norm,
        )?
        narrow_down(
            MnistLabel::One,
            one_fermi_match.matches[0].rel_norm,
            one_fermi_match.matches[0].angle_change.abs(),
        )?
        if one_fermi_match.matches[1] be some:
            narrow_down(
                MnistLabel::One,
                one_fermi_match.matches[1].norm,
                one_fermi_match.matches[1].rel_norm,
                one_fermi_match.matches[1].angle_change.abs(),
            )?
        if one_fermi_match.matches[2] be some:
            narrow_down(
                MnistLabel::One,
                one_fermi_match.matches[2].norm,
                one_fermi_match.matches[2].rel_norm,
                one_fermi_match.matches[2].angle_change.abs(),
            )?
        if downmost_number_of_strokes == 2:
            MnistLabel::One
        else:
            require downmost_number_of_strokes == 3
        // require major_connected_component.max_hole_ilen == 0.0
        // require one_fermi_match.norm < 0.9
        // require major_connected_component.top_k_row_span_sum(3) < 14.5
        // a = one_fermi_match.norm
            MnistLabel::One
        // narrow_down(
        //     MnistLabel::One,
        //     one_fermi_match.norm,
        //     one_fermi_match.rel_norm,
        //     one_fermi_match.angle_change_norm,
        // )?
        // narrow_down(
        //     MnistLabel::One,
        //     one_fermi_match.matches[0].rel_norm,
        //     one_fermi_match.matches[0].angle_change.abs(),
        // )?
        // if one_fermi_match.matches[1] be some:
        //     narrow_down(
        //         MnistLabel::One,
        //         one_fermi_match.matches[1].norm,
        //         one_fermi_match.matches[1].rel_norm,
        //         one_fermi_match.matches[1].angle_change.abs(),
        //     )?
        // if one_fermi_match.matches[2] be some:
        //     narrow_down(
        //         MnistLabel::One,
        //         one_fermi_match.matches[2].norm,
        //         one_fermi_match.matches[2].rel_norm,
        //         one_fermi_match.matches[2].angle_change.abs(),
        //     )?
        // a = major_connected_component.top_k_row_span_sum(3)
        // downmost = one_fermi_match.matches[0]
        // upmost = one_fermi_match.matches[1]
        // hat = one_fermi_match.matches[2]
        // downmost_relative_bounding_box = downmost.relative_bounding_box
        // b1 = downmost_relative_bounding_box.xmin()
        // b2 = downmost_relative_bounding_box.xmax()
        // b3 = downmost_relative_bounding_box.ymin()
        // b4 = downmost_relative_bounding_box.ymax()
        // require a < 10.5

func upmost(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y > 0.0
    dp.y

func downmost(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y <= 0.0
    -cc.end().y

func hat(cc: &ConcaveComponent) -> ?f32:
    dp = cc.displacement()
    require dp.y < 0.0
    require dp.x < 0.0
    -dp.y-dp.x
