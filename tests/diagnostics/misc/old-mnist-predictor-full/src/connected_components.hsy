use mnist::bool_img28
use mnist::bit::find_lowest_nonzero_bit_32
bit32 horizontal_extend(bit32 a, bit32 x) {
    bit32 y = a & (x | (x << 1) | (x >> 1));
    bit32 z = a & (y | (y << 1) | (y >> 1));
    while (z != y) {
        y = z;
        z = a & (y | (y << 1) | (y >> 1));
    }
    return y;
}
pub def find_connected_components(bool_img28 img)=>([]bool_img28 result) :
  let mut result = []bool_img28()
  let mut unsearched = img.clone()
  for j < 30:
    draw unsearched
    while unsearched[j]:
      let a = unsearched[j]
      let shift = find_lowest_nonzero_bit_32(a)
      let mut mask = bool_img28()
      mask[j] = horizontal_extend(a, bit32(1)<< shift)
      let mut flag = false
      while !flag :
        flag = true
        let mut i = j
        forext i < 30 - 1 :
          draw mask
          let old_row = mask[i + 1]
          let new_row = old_row | horizontal_extend(img[i + 1], mask[i])
          if !new_row :
            break
          if old_row != new_row :
            flag = false
            mask[i + 1] = new_row
        forext i >= j :
          draw mask
          let old_row = mask[i]
          let new_row = old_row | horizontal_extend(img[i], mask[i + 1])
          if old_row != new_row :
            flag = false
            mask[i] = new_row
      for j <= k < 30:
        unsearched[k] = unsearched[k] & (~mask[k])
      result.append(mask)
  return result
