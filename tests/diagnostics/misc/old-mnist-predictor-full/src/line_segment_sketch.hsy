use mnist::bool_img28
use mnist::raw_contours::RawContour
use mnist::raw_contours::find_contours
use mnist::connected_components::find_connected_components
        
pub struct Point {float x, float y}

pub struct Interval {int start, int end}

pub struct LineSegment {Point start, Point end, Interval interval}

pub struct LineSegmentSketch{
  RawContour contour
  []LineSegment line_segments
  []Interval convex_components
  []Interval concave_components
}

pub func RawContour int int => Point displacement
def displacement(ct, start, end):
  let N = ct.size()
  let ct_start = ct[start%N]
  let ct_end = ct[end%N]
  return Point{float(ct_end.j - ct_start.j), float(ct_end.i - ct_start.i)}

pub func LineSegment => Point displacement
def displacement(ls):
  return Point{ls.end.x - ls.start.x, ls.end.y - ls.start.y}

pub func Point Point => Point displacement
def displacement(start, end):
  return Point{end.x - start.x, end.y - start.y}

pub func Point => float norm
def norm(u):
  return sqrt(u.x*u.x+u.y*u.y)

pub func Point Point => float dot
def dot(u, v):
  return u.x*v.x+u.y*v.y

pub func Point Point => float cross
def cross(u, v):
  return u.x*v.y-u.y*v.x

pub func Point Point => int direction
def compare(u, v):
  // right to left is positive 
  let direction = sgn(cross(v, u))
  return direction

func Point => Point v
def go_right(u):
  let r = 1.02
  let L = sqrt(u.x*u.x+u.y*u.y)
  assert L > r
  let dr = r*L/sqrt(L*L-r*r)
  let dx = -dr*u.y/L
  let dy = dr*u.x/L
  return Point{u.x+dx, u.y+dy}

func Point => Point v
def go_left(u):
  let r = 1.02
  let L = sqrt(u.x*u.x+u.y*u.y)
  assert L > r
  let dr = r*L/sqrt(L*L-r*r)
  let dx = dr*u.y/L
  let dy = -dr*u.x/L
  return Point{u.x+dx, u.y+dy}

func RawContour int int => LineSegment ls
def get_line_segment(ct, start, end):
  let L = ct.size()
  let ct_start = ct[start%L]
  let pt_start = Point{float(ct_start.j), float(ct_start.i)}
  let ct_end = ct[end%L]
  let pt_end = Point{float(ct_end.j), float(ct_end.i)}
  return LineSegment{pt_start, pt_end, Interval{start,end}}

func RawContour int => int end
def extend_end(ct, start):
  let r = 1.02
  let mut end = start
  let mut dp = displacement(ct, start, end + 1)
  let N = ct.size()
  let max_end = start + ct.size()
  while end <= max_end && norm(dp) < r:
    end++
    dp = displacement(ct, start, end + 1)
  if norm(dp) < r:
    return end
  let mut right_bound = go_right(dp)
  let mut left_bound = go_left(dp)
  let mut r_max = 0.0
  while end <= max_end and (compare(right_bound,dp)>=0) and (compare(dp, left_bound)>=0):
    let dp_norm = norm(dp)
    if dp_norm < r_max - r:
      break
    elif dp_norm > r_max:
      r_max = dp_norm
    if dp_norm > r:
      let dp_right = go_right(dp)
      let dp_left = go_left(dp)
      if compare(right_bound, dp_right)>0:
        right_bound = dp_right
      if compare(dp_left, left_bound)>0:
        left_bound = dp_left
    end++
    draw ct, get_line_segment(ct, start, end)
    print right_bound, dp, left_bound
    dp = displacement(ct, start, end + 1)
  assert end > start
  return end

func RawContour int int => int start
def extend_start(ct, start0, end):
  let r = 1.02
  let mut start = end
  let mut dp0 = displacement(ct, end, start - 1)
  let min_start = end - ct.size()
  while start>=min_start && norm(dp0) < r:
    start--
    dp0 = displacement(ct, end, start - 1)
  if norm(dp0) < r:
    return min(start, start0)
  let mut right_bound = go_right(dp0)
  let mut left_bound = go_left(dp0)
  let mut r_max = 0
  while start >= min_start:
    let dp = displacement(ct, end, start - 1)
    if norm(dp)>r:
      let dp_right = go_right(dp)
      let dp_left = go_left(dp)
      if compare(right_bound, dp_right) > 0:
        right_bound = dp_right
      if compare(dp_left, left_bound) > 0:
        left_bound = dp_left
    draw ct, get_line_segment(ct, start - 1, end)
    print start
    if compare(right_bound, left_bound) >= 0:
      if start - 1 < start0 && !(compare(right_bound, dp) >=0 && compare(dp, left_bound) >= 0):
        break
      start--
    else:
      break
  //assert start <= start0
  if start <= start0:
    return start
  else:
    return start0
  
pub func RawContour => []LineSegment line_segments
def find_line_segments(ct):
  let mut line_segments = []LineSegment()
  let mut start = 0
  let mut end = 1
  let mut max_end = ct.size()
  while end <= max_end:
    end = extend_end(ct, start)
    start = extend_start(ct, start, end)
    let mut ls = get_line_segment(ct, start, end)
    if line_segments.size() > 0:
      let ls_last = line_segments.back()
      let dp_last = displacement(ls_last)
      let dp = displacement(ls)
      let dp1 = displacement(ls_last.start, ls.end)
      if abs(cross(dp, dp_last))<0.001 && dot(dp, dp_last) > 0.0 && abs(cross(dp, dp1))<0.001 && dot(dp, dp1) > 0.0:
        line_segments.pop_back()
        ls.start = ls_last.start
        ls.interval.start = ls_last.interval.start
    else:
      max_end = start + ct.size()
    draw ct, ls
    print start, end
    line_segments.append(ls)
    start = end
    end = start + 1
  let N = ct.size()
  let first_line_segment_interval_end = line_segments.front().interval.end
  let last_line_segment = line_segments.back()
  assert last_line_segment.interval.end <= first_line_segment_interval_end + N
  if last_line_segment.interval.end == first_line_segment_interval_end + N:
    line_segments.pop_back()
    line_segments.front().start = last_line_segment.start
    line_segments.front().interval.start = last_line_segment.interval.start - N
  return line_segments

func RawContour => LineSegmentSketch line_segment_sketch
def find_line_segment_sketch(ct):
  let line_segments = find_line_segments(ct)
  let mut start = 0
  let mut end = 1
  let L = line_segments.size()
  // find convex components
  let mut convex_components = []Interval()
  while start > -L && compare(displacement(line_segments[start%L]),displacement(line_segments[(start-1)%L]))<=0:
    start--
  let cvx_start = start
  while start < cvx_start + L:
    while end<=start+L && compare(displacement(line_segments[end%L]),displacement(line_segments[(end-1)%L]))<=0:
      end++
    if end > start + 1:
      convex_components.append(Interval{start, end})
    start = end
    end = end + 1
  // find concave components
  let mut concave_components = vector<Interval>()
  start = 0
  end = 1
  while start>-L && compare(displacement(line_segments[start%L]),displacement(line_segments[(start-1)%L]))>=0:
    start--
  let ccv_start = start
  while start < ccv_start + L:
    while end<=start+L && compare(displacement(line_segments[end%L]),displacement(line_segments[(end-1)%L]))>=0:
      end++
    if end > start + 1:
       concave_components.append(Interval{start, end})
    start = end
    end = start + 1
  return LineSegmentSketch(ct, line_segments, convex_components, concave_components)

pub func bool_img28 => []LineSegmentSketch line_segment_sketches
def find_line_segment_sketches(img):
  let mut line_segment_sketches = []LineSegmentSketch()
  let connected_components = find_connected_components(img)
  for j < connected_components.size():
    let cc = connected_components[j]
    let contours = find_contours(cc)
    for k < contours.size():
      let ct = contours[k]
      let line_segment_sketch = find_line_segment_sketch(ct)
      line_segment_sketches.append(line_segment_sketch)
  return line_segment_sketches
