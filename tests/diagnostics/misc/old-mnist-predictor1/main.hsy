use mnist::bool_img28
use mnist::bit
use mnist::connected_components
pub struct Point29 {int i, int j}
pub struct RawContour : vector<Point29>
struct bool_img29 : array<bit32,31>
enum Direction {UP, LEFT, DOWN, RIGHT}
pub def find_contours(bool_img28 cc) => ([]RawContour contours):
  let mut result = []RawContour()
  let mut boundary_unsearched = bool_img29()
  for 1 <= i <= 29:
    draw cc, boundary_unsearched
    let r_ur = cc[i-1]
    let r_dr = cc[i]
    let r_ul = r_ur << 1
    let r_dl = r_dr << 1
    boundary_unsearched[i] = (r_ur|r_dr|r_ul|r_dl) & (~(r_ur&r_dr&r_ul&r_dl))
  for 1 <= k <= 29:
    draw cc, boundary_unsearched
    while boundary_unsearched[k]:
      let mut contour = RawContour()
      let mut i = k
      let mut j = bit::find_lowest_nonzero_bit_32(boundary_unsearched[k])
      // prepare rows
      let mut row_above = cc[i-1]
      let mut row_below = cc[i]
      let mut last_point = Point29{0, 0}
      // prepare initial direction
      let mut direction = UP
      let env_above = (row_above >> (j - 1)) & bit32(3)
      let env_below = (row_below >> (j - 1)) & bit32(3)
      switch (env_above) {
      case 0:
        switch(env_below){
        case 1:
        case 3:
          direction = LEFT
        case 2:
          direction = UP
        }
      case 1:
        direction = DOWN
      case 2:
        switch(env_below){
        case 0:
          direction = RIGHT
        case 1:
        case 3:
          direction = LEFT
        case 2:
          direction = UP
        }
      case 3:
        switch(env_below){
        case 0:
        case 1:
          direction = RIGHT
        case 2:
          direction = UP
        }
      }
      // store initial position and direction
      let i0 = i
      let j0 = j
      let dir0 = direction
      let mut angle_change = 0
      let mut last_angle_change = 0
      let mut total_angle_change = 0
      // prepare streaks
      let mut last_streak = -1
      let mut current_streak = 0
      // loop in the geometric sense!
      do while !(i == i0 && j == j0 && direction == dir0):
        draw cc, boundary_unsearched, contour
        print total_angle_change
        total_angle_change = total_angle_change + angle_change
        boundary_unsearched[i] = boundary_unsearched[i] & (~(bit32(1) << j))
        if angle_change:
          if (last_angle_change==-1 && last_streak!=-1 && (last_streak==1 || current_streak==1)):
            contour[contour.size()-1] = last_point
            last_streak = bit32(-1)
          else:
            contour.append(last_point)
            last_streak = current_streak
          current_streak = 0
          last_angle_change = angle_change
        last_point = Point29{i - 1, 29 - j}
        current_streak = current_streak + 1
        switch (direction) {
        case UP:
          switch ((row_above >> (j - 1)) & bit32(3)) {
          case 0:
            direction = LEFT
            j = j + 1
            angle_change = 1
          case 2:
            i = i - 1 
            row_below = row_above
            row_above = cc[i-1]
            angle_change = 0
          default:
            direction = RIGHT
            angle_change = -1
            j = j - 1
          }
        case DOWN:
          switch ((row_below >> (j - 1)) & bit32(3)) {
          case 0:
            direction = RIGHT
            angle_change = 1
            j = j - 1
          case 1:
            i = i + 1 
            row_above = row_below
            row_below = cc[i]
            angle_change = 0
          default:
            direction = LEFT
            j = j + 1
            angle_change = -1
          }
        case LEFT:
          let pixel_above = (row_above >> j) & bit32(1)
          let pixel_below = (row_below >> j) & bit32(1)
          if (!pixel_above) && bool(pixel_below):
            j = j + 1
            angle_change = 0
          elif !pixel_above:
            direction = DOWN
            i = i + 1
            row_above = row_below
            row_below = cc[i]
            angle_change = 1
          else:
            direction = UP
            i = i - 1
            row_below = row_above
            row_above = cc[i-1]
            angle_change = -1
        case RIGHT:
          let pixel_above = (row_above >> (j - 1)) & bit32(1)
          let pixel_below = (row_below >> (j - 1)) & bit32(1)
          if (!pixel_below) && bool(pixel_above):
            j = j - 1
            angle_change = 0
          elif !pixel_below:
            direction = UP
            i = i - 1
            row_below = row_above
            row_above = cc[i-1]
            angle_change = 1
          else:
            direction = DOWN
            i = i + 1
            row_above = row_below
            row_below = cc[i]
            angle_change = -1
        }
      if angle_change:
        contour.append(last_point)
        last_streak = current_streak
        current_streak = 0
      result.append(contour)
  return result
