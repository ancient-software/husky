use cv::datasets::mnist::BinaryImage28


proc find_connected_components(img: BinaryImage28) -> []BinaryImage28:
    let mut result = []BinaryImage28()
    let mut unsearched = img.clone()
    for j < 30:
        while unsearched[j]:
            let a = unsearched[j]
            let shift = a.ctz()
            let mut mask = BinaryImage28()
            mask[j] = horizontal_extend(a, 1b32 << shift)
            let mut flag = false
            while !flag :
                flag = true
                let mut i = j
                forext i < 30 - 1:
                    let old_row = mask[i + 1]
                    let new_row = old_row | horizontal_extend(img[i + 1], mask[i])
                    if !new_row:
                        break
                    if old_row != new_row :
                        flag = false
                        mask[i + 1] = new_row
                forext i >= j:
                    let old_row = mask[i]
                    let new_row = old_row | horizontal_extend(img[i], mask[i + 1])
                    if old_row != new_row:
                        flag = false
                        mask[i] = new_row
            for j <= k < 30:
                unsearched[k] &= (~mask[k])
            result.push(mask)
    return result

