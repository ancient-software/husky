use crate::geom2d::*
use crate::raw_contour::RawContour

struct LineSegmentInterval:
    start: i32
    end: i32

struct LineSegment:
    start: Point2d
    end: Point2d
    interval: LineSegmentInterval

    func displacement() -> Vector2d:
        this.start.to(this.end)

struct LineSegmentSketch:
    line_segments: []LineSegment

func go_right(u: Vector2d, r: float) -> Vector2d:
    L = sqrt(u.x*u.x+u.y*u.y)
  assert L > r
  let dr = r*L/sqrt(L*L-r*r)
  let dx = dr*u.y/L
  let dy = -dr*u.x/L
  return Vector2d u.x+dx u.y+dy

fn go_left(u: Vector2d, r: float) -> Vector2d
  let L = sqrt(u.x*u.x+u.y*u.y)
  assert L > r
  let dr = r*L/sqrt(L*L-r*r)
  let dx = -dr*u.y/L
  let dy = dr*u.x/L
  return Vector2d u.x+dx u.y+dy

proc extend_end(ct: RawContour, start: i32, r: f32) -> i32:
    let mut end = start
    let mut dp = ct.displacement(start, end + 1)
    let N = ct.points.ilen()
    let max_end = start + N
    while end <= max_end and dp.norm() < r:
        end++
        dp = ct.displacement(start, end + 1)
    if dp.norm() < r:
        return end
    let mut right_bound = go_right(dp, r)
    let mut left_bound = go_left(dp, r)
    let mut r_max = 0.0
    while end <= max_end
            and is_rotation_counterclockwise(right_bound, dp) >= 0 
            and is_rotation_counterclockwise(dp, left_bound) >= 0:
        let dp_norm = dp.norm()
        if dp_norm < r_max - r:
            break
        elif dp_norm > r_max:
            r_max = dp_norm
        if dp_norm > r:
            let dp_right = go_right dp r
            let dp_left = go_left dp r
            if is_rotation_counterclockwise(right_bound, dp_right) > 0
                right_bound = dp_right
            if is_rotation_counterclockwise(dp_left, left_bound) > 0
                left_bound = dp_left
        end++
        dp = ct.displacement(start, end + 1)
    assert end > start
    return end
