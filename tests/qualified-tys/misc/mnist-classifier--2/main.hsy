use cv::datasets::mnist::BinaryImage28

task:
    ml::datasets::cv::mnist::new_binary_dataset()


proc horizontal_extend(a: b32, x: b32) -> b32:
    let y = a & (x | (x << 1) | (x >> 1))
    var z = a & (y | (y << 1) | (y >> 1))
    while z != y:
        y = z
        z = a & (y | (y << 1) | (y >> 1))
    return y

proc find_connected_components(img: BinaryImage28) -> []BinaryImage28:
    var result = []BinaryImage28()
    var unsearched = img.clone()
    for j < 30:
        while unsearched[j]:
            let a = unsearched[j]
            let shift = a.ctz()
            var mask = BinaryImage28()
            mask[j] = horizontal_extend(a, 1b32 << shift)
            var flag = false
            for j <= k < 30:
                unsearched[k] &= (~mask[k])
            result.push(mask)
    return result


main:
    a = input
    b = a[1]
    c = a[12]
    d = find_connected_components(input)
    d.ilen()