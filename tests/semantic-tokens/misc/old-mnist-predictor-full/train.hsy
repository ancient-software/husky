use mnist::utils
use mnist::utils::labeled_bool_img28
use mnist::line_segment_sketch
use mnist::line_segment_sketch::find_line_segment_sketches
use mnist::line_segment_sketch::Point
use mnist::line_segment_sketch::norm
use mnist::line_segment_sketch::compare
use mnist::line_segment_sketch::dot
use mnist::line_segment_sketch::displacement
use mnist::line_segment_sketch::LineSegment
use mnist::line_segment_sketch::Interval
use mnist::line_segment_sketch::LineSegmentSketch
pub struct CurveComponent{
  float angle_start
  float angle_change
  float length
  Point start
  Point end
}
def getAngle(Point a) => (float angle):
  return -float(sgn(a.y)) * acos(a.x/norm(a))
def getAngle(Point a, Point b) => (float angle):
  let angle = float(compare(a, b)) * acos(dot(a,b)/(norm(a)*norm(b)))
  return angle
def additive_kernel(float a, float b) => (float kernel):
  return max(0.0, 1.0 - abs(a - b))
def additive_kernel(float a, float b, float beta) => (float kernel):
  return max(0.0, 1.0 - beta * abs(a - b))
def additive_kernel_Point(Point a, Point b) => (float kernel):
  return max(0.0, 1.0 - norm(displacement(a, b)))
def additive_kernel_Point(Point a, Point b, float beta) => (float kernel):
  return max(0.0, 1.0 - beta * norm(displacement(a, b)))
def multiplicative_kernel(float a, float b) => (float kernel):
  return min(a/b, b/a)
def multiplicative_kernel(float a, float b, float bandwidth) => (float kernel):
  if a > b:
    return min(b/a * bandwidth, 1.0)
  else:
    return min(a/b * bandwidth, 1.0)
def get_curve_components(vector<LineSegment> ls, Interval interval) => (CurveComponent curve_component):
  let L = ls.size()
  let start = ls[interval.start%L].start
  let end = ls[interval.end%L].start
  let angle_start = getAngle(start)
  let mut angle_change = 0.0
  let mut length = 0.0
  let mut dp0 = displacement(ls[0])
  for interval.start < i < interval.end:
    let line_segment = ls[i%L]
    let dp = displacement(line_segment)
    angle_change = angle_change + getAngle(dp0, dp)
    length = length + norm(dp)
    dp0 = dp
    print angle_change, length
  return CurveComponent{angle_start, angle_change, length, start, end}
def similarity(CurveComponent a, CurveComponent b) => (float similarity):
  let mut result = 1.0
  result = min(result, additive_kernel(a.angle_start, b.angle_start, 0.2))
  result = min(result, additive_kernel(a.angle_change, b.angle_change, 0.2))
  result = min(result, additive_kernel(a.angle_start+a.angle_change, b.angle_start + b.angle_change, 0.2))
  result = min(result, multiplicative_kernel(a.length, b.length, 1.4))
  result = min(result, additive_kernel_Point(a.start, b.start, 0.2))
  result = min(result, additive_kernel_Point(a.end, b.end, 0.2))
  return result
def similarity_batch(vector<CurveComponent> a, vector<CurveComponent> b) => (float similarity):
  let Na = a.size()
  let Nb = b.size()
  // let mut matched = vector<bool>()
  // for j < Nb:
  //  matched.append(false)
  let mut result = 0.0
  for i < Na:
    let mut s = 0.0
    let mut j_matched = -1
    for j < Nb:
      if s < similarity(a[i], b[j]):
        s = similarity(a[i], b[j])
      //let is_matched = matched[j]
      //let is_matched = false
      //if (!is_matched) && s < similarity(a[i], b[j]):
      //j_matched = j
    //if j_matched >= 0:
    //  matched[j_matched] = true
    result = result + s
  return result / float(max(Na, Nb))
def extract_curve_components(vector<LineSegmentSketch> line_segment_sketches) => ( vector<CurveComponent> curve_components):
  let mut curve_components = vector<CurveComponent>()
  let N0 = line_segment_sketches.size()
  for i < N0:
    let lssk = line_segment_sketches[i]
    let convex_component_intervals = lssk.convex_components
    let concave_component_intervals = lssk.concave_components
    let N1 = convex_component_intervals.size()
    for j < N1:
      let interval = convex_component_intervals[j]
      let curve_component = get_curve_components(lssk.line_segments, interval)
      curve_components.append(curve_component)
    let N2 = concave_component_intervals.size()
    for j < N2:
      let interval = concave_component_intervals[j]
      let curve_component = get_curve_components(lssk.line_segments, interval)
      curve_components.append(curve_component)
  return curve_components
struct Configuration{
  int label
  vector<CurveComponent> curve_components
} 
pub def train(int N, vector<labeled_bool_img28> images) => (float test_error):
  let mut hypothesis = vector<Configuration>()
  for 0 <= i < N:
    let img = images[i]
    let line_segment_sketches = find_line_segment_sketches(img.data)
    let curve_components = extract_curve_components(line_segment_sketches)
    draw img, line_segment_sketches
    let mut prediction = -1
    let H = hypothesis.size()
    let mut highest_similarity = 0.0
    for h < H:
      let config = hypothesis[h]
      let s = similarity_batch(config.curve_components, curve_components)
      if s > highest_similarity:
        highest_similarity = s
        prediction = config.label
    if (i == 0) || (img.label != prediction):
      hypothesis.append(Configuration{img.label, curve_components})
    print img.label, prediction
  let H = hypothesis.size()
  let mut test_mistakes = 0
  for N <= i < N + 20:
    let img = images[i]
    let line_segment_sketches = find_line_segment_sketches(img.data)
    let curve_components = extract_curve_components(line_segment_sketches)
    draw img, line_segment_sketches
    let mut prediction = -1
    let N = hypothesis.size()
    let mut highest_similarity = 0.0
    for h < N:
      let config = hypothesis[h]
      let s = similarity_batch(config.curve_components, curve_components)
      if s > highest_similarity:
        highest_similarity = s
        prediction = config.label
    if prediction != img.label:
      test_mistakes++
    print img.label, prediction, test_mistakes
  let test_error = 1.0*float(test_mistakes)/20.0
  return test_error
